

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sat Jul 27 10:22:38 2024

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    22                           	dabs	1,0x7E,2
    23     0000                     
    24                           ; Generated 22/03/2023 GMT
    25                           ; 
    26                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F877A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58     0000                     	;# 
    59     0001                     	;# 
    60     0002                     	;# 
    61     0003                     	;# 
    62     0004                     	;# 
    63     0005                     	;# 
    64     0006                     	;# 
    65     0007                     	;# 
    66     0008                     	;# 
    67     0009                     	;# 
    68     000A                     	;# 
    69     000B                     	;# 
    70     000C                     	;# 
    71     000D                     	;# 
    72     000E                     	;# 
    73     000E                     	;# 
    74     000F                     	;# 
    75     0010                     	;# 
    76     0011                     	;# 
    77     0012                     	;# 
    78     0013                     	;# 
    79     0014                     	;# 
    80     0015                     	;# 
    81     0015                     	;# 
    82     0016                     	;# 
    83     0017                     	;# 
    84     0018                     	;# 
    85     0019                     	;# 
    86     001A                     	;# 
    87     001B                     	;# 
    88     001B                     	;# 
    89     001C                     	;# 
    90     001D                     	;# 
    91     001E                     	;# 
    92     001F                     	;# 
    93     0081                     	;# 
    94     0085                     	;# 
    95     0086                     	;# 
    96     0087                     	;# 
    97     0088                     	;# 
    98     0089                     	;# 
    99     008C                     	;# 
   100     008D                     	;# 
   101     008E                     	;# 
   102     0091                     	;# 
   103     0092                     	;# 
   104     0093                     	;# 
   105     0094                     	;# 
   106     0098                     	;# 
   107     0099                     	;# 
   108     009C                     	;# 
   109     009D                     	;# 
   110     009E                     	;# 
   111     009F                     	;# 
   112     010C                     	;# 
   113     010D                     	;# 
   114     010E                     	;# 
   115     010F                     	;# 
   116     018C                     	;# 
   117     018D                     	;# 
   118     0000                     	;# 
   119     0001                     	;# 
   120     0002                     	;# 
   121     0003                     	;# 
   122     0004                     	;# 
   123     0005                     	;# 
   124     0006                     	;# 
   125     0007                     	;# 
   126     0008                     	;# 
   127     0009                     	;# 
   128     000A                     	;# 
   129     000B                     	;# 
   130     000C                     	;# 
   131     000D                     	;# 
   132     000E                     	;# 
   133     000E                     	;# 
   134     000F                     	;# 
   135     0010                     	;# 
   136     0011                     	;# 
   137     0012                     	;# 
   138     0013                     	;# 
   139     0014                     	;# 
   140     0015                     	;# 
   141     0015                     	;# 
   142     0016                     	;# 
   143     0017                     	;# 
   144     0018                     	;# 
   145     0019                     	;# 
   146     001A                     	;# 
   147     001B                     	;# 
   148     001B                     	;# 
   149     001C                     	;# 
   150     001D                     	;# 
   151     001E                     	;# 
   152     001F                     	;# 
   153     0081                     	;# 
   154     0085                     	;# 
   155     0086                     	;# 
   156     0087                     	;# 
   157     0088                     	;# 
   158     0089                     	;# 
   159     008C                     	;# 
   160     008D                     	;# 
   161     008E                     	;# 
   162     0091                     	;# 
   163     0092                     	;# 
   164     0093                     	;# 
   165     0094                     	;# 
   166     0098                     	;# 
   167     0099                     	;# 
   168     009C                     	;# 
   169     009D                     	;# 
   170     009E                     	;# 
   171     009F                     	;# 
   172     010C                     	;# 
   173     010D                     	;# 
   174     010E                     	;# 
   175     010F                     	;# 
   176     018C                     	;# 
   177     018D                     	;# 
   178                           
   179                           	psect	idataBANK0
   180     052E                     __pidataBANK0:
   181                           
   182                           ;initializer for _number
   183     052E  34C8               	retlw	200
   184     052F  3401               	retlw	1
   185                           
   186                           	psect	strings
   187     0003                     __pstrings:
   188     0003                     stringtab:
   189     0003                     __stringtab:
   190     0003                     stringcode:	
   191                           ;	String table - string pointers are 1 byte each
   192                           
   193     0003                     stringdir:
   194     0003  3000               	movlw	high stringdir
   195     0004  008A               	movwf	10
   196     0005  0804               	movf	4,w
   197     0006  0A84               	incf	4,f
   198     0007  0782               	addwf	2,f
   199     0008                     __stringbase:
   200     0008  3400               	retlw	0
   201     0009                     __end_of__stringtab:
   202     0009                     _dpowers:
   203     0009  3401               	retlw	1
   204     000A  3400               	retlw	0
   205     000B  340A               	retlw	10
   206     000C  3400               	retlw	0
   207     000D  3464               	retlw	100
   208     000E  3400               	retlw	0
   209     000F  34E8               	retlw	232
   210     0010  3403               	retlw	3
   211     0011  3410               	retlw	16
   212     0012  3427               	retlw	39
   213     0013                     __end_of_dpowers:
   214     0043                     _RD3	set	67
   215     0042                     _RD2	set	66
   216     0047                     _RD7	set	71
   217     0046                     _RD6	set	70
   218     0045                     _RD5	set	69
   219     0044                     _RD4	set	68
   220     0088                     _TRISD	set	136
   221     0013                     STR_1:
   222     0013  3425               	retlw	37	;'%'
   223     0014  3464               	retlw	100	;'d'
   224     0015  3400               	retlw	0
   225                           
   226                           	psect	cinit
   227     07E6                     start_initialization:	
   228                           ; #config settings
   229                           
   230     07E6                     __initialization:
   231                           
   232                           ; Initialize objects allocated to BANK0
   233     07E6  120A  118A  252E  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   234     07EB  00B7               	movwf	__pdataBANK0& (0+127)
   235     07EC  120A  118A  252F  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   236     07F1  00B8               	movwf	(__pdataBANK0+1)& (0+127)
   237                           
   238                           ; Clear objects allocated to BANK0
   239     07F2  01AD               	clrf	__pbssBANK0& (0+127)
   240     07F3  01AE               	clrf	(__pbssBANK0+1)& (0+127)
   241     07F4  01AF               	clrf	(__pbssBANK0+2)& (0+127)
   242     07F5  01B0               	clrf	(__pbssBANK0+3)& (0+127)
   243     07F6  01B1               	clrf	(__pbssBANK0+4)& (0+127)
   244     07F7  01B2               	clrf	(__pbssBANK0+5)& (0+127)
   245     07F8  01B3               	clrf	(__pbssBANK0+6)& (0+127)
   246     07F9  01B4               	clrf	(__pbssBANK0+7)& (0+127)
   247     07FA  01B5               	clrf	(__pbssBANK0+8)& (0+127)
   248     07FB  01B6               	clrf	(__pbssBANK0+9)& (0+127)
   249     07FC                     end_of_initialization:	
   250                           ;End of C runtime variable initialization code
   251                           
   252     07FC                     __end_of__initialization:
   253     07FC  0183               	clrf	3
   254     07FD  120A  118A  2D8D   	ljmp	_main	;jump to C main() function
   255                           
   256                           	psect	bssBANK0
   257     002D                     __pbssBANK0:
   258     002D                     _buff:
   259     002D                     	ds	10
   260                           
   261                           	psect	dataBANK0
   262     0037                     __pdataBANK0:
   263     0037                     _number:
   264     0037                     	ds	2
   265                           
   266                           	psect	cstackCOMMON
   267     0070                     __pcstackCOMMON:
   268     0070                     ?_Lcd_Port:
   269     0070                     ??_Lcd_Port:	
   270                           ; 1 bytes @ 0x0
   271                           
   272     0070                     ?_Lcd_Cmd:	
   273                           ; 1 bytes @ 0x0
   274                           
   275     0070                     ?_Lcd_Init:	
   276                           ; 1 bytes @ 0x0
   277                           
   278     0070                     ?_Lcd_Write_Char:	
   279                           ; 1 bytes @ 0x0
   280                           
   281     0070                     ?_Lcd_Write_String:	
   282                           ; 1 bytes @ 0x0
   283                           
   284     0070                     ?_main:	
   285                           ; 1 bytes @ 0x0
   286                           
   287     0070                     ?___lwdiv:	
   288                           ; 1 bytes @ 0x0
   289                           
   290     0070                     Lcd_Port@a:	
   291                           ; 2 bytes @ 0x0
   292                           
   293     0070                     ___lwdiv@divisor:	
   294                           ; 1 bytes @ 0x0
   295                           
   296                           
   297                           ; 2 bytes @ 0x0
   298     0070                     	ds	1
   299     0071                     ??_Lcd_Cmd:
   300     0071                     ??_Lcd_Write_Char:	
   301                           ; 1 bytes @ 0x1
   302                           
   303                           
   304                           ; 1 bytes @ 0x1
   305     0071                     	ds	1
   306     0072                     Lcd_Write_Char@temp:
   307     0072                     ___lwdiv@dividend:	
   308                           ; 1 bytes @ 0x2
   309                           
   310                           
   311                           ; 2 bytes @ 0x2
   312     0072                     	ds	1
   313     0073                     Lcd_Cmd@a:
   314     0073                     Lcd_Write_Char@y:	
   315                           ; 1 bytes @ 0x3
   316                           
   317                           
   318                           ; 1 bytes @ 0x3
   319     0073                     	ds	1
   320     0074                     ?_Lcd_Set_Cursor:
   321     0074                     ??_Lcd_Init:	
   322                           ; 1 bytes @ 0x4
   323                           
   324     0074                     ??___lwdiv:	
   325                           ; 1 bytes @ 0x4
   326                           
   327     0074                     Lcd_Set_Cursor@b:	
   328                           ; 1 bytes @ 0x4
   329                           
   330     0074                     Lcd_Write_Char@a:	
   331                           ; 1 bytes @ 0x4
   332                           
   333     0074                     ___lwdiv@quotient:	
   334                           ; 1 bytes @ 0x4
   335                           
   336                           
   337                           ; 2 bytes @ 0x4
   338     0074                     	ds	1
   339     0075                     ??_Lcd_Set_Cursor:
   340     0075                     ??_Lcd_Write_String:	
   341                           ; 1 bytes @ 0x5
   342                           
   343                           
   344                           ; 1 bytes @ 0x5
   345     0075                     	ds	1
   346     0076                     Lcd_Set_Cursor@a:
   347     0076                     ___lwdiv@counter:	
   348                           ; 1 bytes @ 0x6
   349                           
   350     0076                     Lcd_Write_String@i:	
   351                           ; 1 bytes @ 0x6
   352                           
   353                           
   354                           ; 2 bytes @ 0x6
   355     0076                     	ds	1
   356     0077                     ?___lwmod:
   357     0077                     Lcd_Set_Cursor@z:	
   358                           ; 2 bytes @ 0x7
   359                           
   360     0077                     ___lwmod@divisor:	
   361                           ; 1 bytes @ 0x7
   362                           
   363                           
   364                           ; 2 bytes @ 0x7
   365     0077                     	ds	1
   366     0078                     Lcd_Set_Cursor@y:
   367     0078                     Lcd_Write_String@a:	
   368                           ; 1 bytes @ 0x8
   369                           
   370                           
   371                           ; 1 bytes @ 0x8
   372     0078                     	ds	1
   373     0079                     Lcd_Set_Cursor@temp:
   374     0079                     ___lwmod@dividend:	
   375                           ; 1 bytes @ 0x9
   376                           
   377                           
   378                           ; 2 bytes @ 0x9
   379     0079                     	ds	2
   380     007B                     ??___lwmod:
   381     007B                     ___lwmod@counter:	
   382                           ; 1 bytes @ 0xB
   383                           
   384                           
   385                           ; 1 bytes @ 0xB
   386     007B                     	ds	1
   387     007C                     ??_main:
   388                           
   389                           	psect	cstackBANK0
   390     0020                     __pcstackBANK0:	
   391                           ; 1 bytes @ 0xC
   392                           
   393     0020                     ?_sprintf:
   394     0020                     sprintf@f:	
   395                           ; 2 bytes @ 0x0
   396                           
   397                           
   398                           ; 1 bytes @ 0x0
   399     0020                     	ds	3
   400     0023                     ??_sprintf:
   401                           
   402                           ; 1 bytes @ 0x3
   403     0023                     	ds	3
   404     0026                     sprintf@ap:
   405                           
   406                           ; 1 bytes @ 0x6
   407     0026                     	ds	1
   408     0027                     sprintf@flag:
   409                           
   410                           ; 1 bytes @ 0x7
   411     0027                     	ds	1
   412     0028                     sprintf@prec:
   413                           
   414                           ; 1 bytes @ 0x8
   415     0028                     	ds	1
   416     0029                     sprintf@val:
   417                           
   418                           ; 2 bytes @ 0x9
   419     0029                     	ds	2
   420     002B                     sprintf@sp:
   421                           
   422                           ; 1 bytes @ 0xB
   423     002B                     	ds	1
   424     002C                     sprintf@c:
   425                           
   426                           ; 1 bytes @ 0xC
   427     002C                     	ds	1
   428                           
   429                           	psect	maintext
   430     058D                     __pmaintext:	
   431 ;;
   432 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   433 ;;
   434 ;; *************** function _main *****************
   435 ;; Defined at:
   436 ;;		line 30 in file "moi.c"
   437 ;; Parameters:    Size  Location     Type
   438 ;;		None
   439 ;; Auto vars:     Size  Location     Type
   440 ;;		None
   441 ;; Return value:  Size  Location     Type
   442 ;;                  1    wreg      void 
   443 ;; Registers used:
   444 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   445 ;; Tracked objects:
   446 ;;		On entry : B00/0
   447 ;;		On exit  : 0/0
   448 ;;		Unchanged: 0/0
   449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   450 ;;      Params:         0       0       0       0       0
   451 ;;      Locals:         0       0       0       0       0
   452 ;;      Temps:          0       0       0       0       0
   453 ;;      Totals:         0       0       0       0       0
   454 ;;Total ram usage:        0 bytes
   455 ;; Hardware stack levels required when called: 3
   456 ;; This function calls:
   457 ;;		_Lcd_Init
   458 ;;		_Lcd_Set_Cursor
   459 ;;		_Lcd_Write_String
   460 ;;		_sprintf
   461 ;; This function is called by:
   462 ;;		Startup code after reset
   463 ;; This function uses a non-reentrant model
   464 ;;
   465                           
   466     058D                     _main:	
   467                           ;psect for function _main
   468                           
   469     058D                     l1113:	
   470                           ;incstack = 0
   471                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   472                           
   473                           
   474                           ;moi.c: 31:    TRISD =0x00;
   475     058D  1683               	bsf	3,5	;RP0=1, select bank1
   476     058E  1303               	bcf	3,6	;RP1=0, select bank1
   477     058F  0188               	clrf	8	;volatile
   478     0590                     l1115:
   479                           
   480                           ;moi.c: 32:     Lcd_Init();
   481     0590  120A  118A  26AE  120A  118A  	fcall	_Lcd_Init
   482     0595                     l1117:
   483                           
   484                           ;moi.c: 34:     {;moi.c: 36:         Lcd_Set_Cursor(1,1);
   485     0595  01F4               	clrf	Lcd_Set_Cursor@b
   486     0596  0AF4               	incf	Lcd_Set_Cursor@b,f
   487     0597  3001               	movlw	1
   488     0598  120A  118A  2668  120A  118A  	fcall	_Lcd_Set_Cursor
   489     059D                     l1119:
   490                           
   491                           ;moi.c: 37:         sprintf(buff, "%d", number);
   492     059D  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   493     059E  1283               	bcf	3,5	;RP0=0, select bank0
   494     059F  1303               	bcf	3,6	;RP1=0, select bank0
   495     05A0  00A0               	movwf	sprintf@f
   496     05A1  30C8               	movlw	200
   497     05A2  00A1               	movwf	?_sprintf+1
   498     05A3  3001               	movlw	1
   499     05A4  00A2               	movwf	?_sprintf+2
   500     05A5  302D               	movlw	(low (_buff| 0))& (0+255)
   501     05A6  120A  118A  270C  120A  118A  	fcall	_sprintf
   502     05AB                     l1121:
   503                           
   504                           ;moi.c: 39:         Lcd_Write_String(buff);
   505     05AB  302D               	movlw	(low (_buff| 0))& (0+255)
   506     05AC  120A  118A  254A  120A  118A  	fcall	_Lcd_Write_String
   507     05B1  2D95               	goto	l1117
   508     05B2  120A  118A  2800   	ljmp	start
   509     05B5                     __end_of_main:
   510                           
   511                           	psect	text1
   512     070C                     __ptext1:	
   513 ;; *************** function _sprintf *****************
   514 ;; Defined at:
   515 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
   516 ;; Parameters:    Size  Location     Type
   517 ;;  sp              1    wreg     PTR unsigned char 
   518 ;;		 -> buff(10), 
   519 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   520 ;;		 -> STR_1(3), 
   521 ;; Auto vars:     Size  Location     Type
   522 ;;  sp              1   11[BANK0 ] PTR unsigned char 
   523 ;;		 -> buff(10), 
   524 ;;  tmpval          4    0        struct .
   525 ;;  val             2    9[BANK0 ] unsigned int 
   526 ;;  cp              2    0        PTR const unsigned char 
   527 ;;  len             2    0        unsigned int 
   528 ;;  c               1   12[BANK0 ] unsigned char 
   529 ;;  prec            1    8[BANK0 ] char 
   530 ;;  flag            1    7[BANK0 ] unsigned char 
   531 ;;  ap              1    6[BANK0 ] PTR void [1]
   532 ;;		 -> ?_sprintf(2), 
   533 ;; Return value:  Size  Location     Type
   534 ;;                  2    0[BANK0 ] int 
   535 ;; Registers used:
   536 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   537 ;; Tracked objects:
   538 ;;		On entry : 0/0
   539 ;;		On exit  : 0/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   542 ;;      Params:         0       3       0       0       0
   543 ;;      Locals:         0       7       0       0       0
   544 ;;      Temps:          0       3       0       0       0
   545 ;;      Totals:         0      13       0       0       0
   546 ;;Total ram usage:       13 bytes
   547 ;; Hardware stack levels used: 1
   548 ;; Hardware stack levels required when called: 1
   549 ;; This function calls:
   550 ;;		___lwdiv
   551 ;;		___lwmod
   552 ;; This function is called by:
   553 ;;		_main
   554 ;; This function uses a non-reentrant model
   555 ;;
   556                           
   557     070C                     _sprintf:	
   558                           ;psect for function _sprintf
   559                           
   560                           
   561                           ;incstack = 0
   562                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   563                           ;sprintf@sp stored from wreg
   564     070C  1283               	bcf	3,5	;RP0=0, select bank0
   565     070D  1303               	bcf	3,6	;RP1=0, select bank0
   566     070E  00AB               	movwf	sprintf@sp
   567     070F                     l1043:
   568                           
   569                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   570     070F  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   571     0710  00A6               	movwf	sprintf@ap
   572                           
   573                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   574     0711  2FD1               	goto	l1097
   575     0712                     l1045:
   576                           
   577                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   578     0712  3025               	movlw	37
   579     0713  062C               	xorwf	sprintf@c,w
   580     0714  1903               	btfsc	3,2
   581     0715  2F17               	goto	u541
   582     0716  2F18               	goto	u540
   583     0717                     u541:
   584     0717  2F22               	goto	l1051
   585     0718                     u540:
   586     0718                     l1047:
   587                           
   588                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   589     0718  082B               	movf	sprintf@sp,w
   590     0719  0084               	movwf	4
   591     071A  082C               	movf	sprintf@c,w
   592     071B  1383               	bcf	3,7	;select IRP bank0
   593     071C  0080               	movwf	0
   594     071D                     l1049:
   595     071D  3001               	movlw	1
   596     071E  00FF               	movwf	btemp+1
   597     071F  087F               	movf	btemp+1,w
   598     0720  07AB               	addwf	sprintf@sp,f
   599                           
   600                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 559:    continue;
   601     0721  2FD1               	goto	l1097
   602     0722                     l1051:
   603                           
   604                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   605     0722  01A7               	clrf	sprintf@flag
   606     0723                     l1055:	
   607                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   608                           
   609     0723  3001               	movlw	1
   610     0724  07A0               	addwf	sprintf@f,f
   611     0725  30FF               	movlw	-1
   612     0726  0720               	addwf	sprintf@f,w
   613     0727  0084               	movwf	4
   614     0728  120A  118A  2003  120A  118A  	fcall	stringdir
   615     072D  00AC               	movwf	sprintf@c
   616     072E  00A3               	movwf	??_sprintf
   617     072F  01A4               	clrf	??_sprintf+1
   618                           
   619                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   620                           ; Switch size 1, requested type "simple"
   621                           ; Number of cases is 1, Range of values is 0 to 0
   622                           ; switch strategies available:
   623                           ; Name         Instructions Cycles
   624                           ; simple_byte            4     3 (average)
   625                           ; direct_byte           11     8 (fixed)
   626                           ; jumptable            260     6 (fixed)
   627                           ;	Chosen strategy is simple_byte
   628     0730  0824               	movf	??_sprintf+1,w
   629     0731  3A00               	xorlw	0	; case 0
   630     0732  1903               	skipnz
   631     0733  2F35               	goto	l1143
   632     0734  2FD1               	goto	l1097
   633     0735                     l1143:
   634                           
   635                           ; Switch size 1, requested type "simple"
   636                           ; Number of cases is 3, Range of values is 0 to 105
   637                           ; switch strategies available:
   638                           ; Name         Instructions Cycles
   639                           ; simple_byte           10     6 (average)
   640                           ; jumptable            260     6 (fixed)
   641                           ;	Chosen strategy is simple_byte
   642     0735  0823               	movf	??_sprintf,w
   643     0736  3A00               	xorlw	0	; case 0
   644     0737  1903               	skipnz
   645     0738  2FE1               	goto	l1099
   646     0739  3A64               	xorlw	100	; case 100
   647     073A  1903               	skipnz
   648     073B  2F40               	goto	l1057
   649     073C  3A0D               	xorlw	13	; case 105
   650     073D  1903               	skipnz
   651     073E  2F40               	goto	l1057
   652     073F  2FD1               	goto	l1097
   653     0740                     l1057:
   654                           
   655                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
   656     0740  0826               	movf	sprintf@ap,w
   657     0741  0084               	movwf	4
   658     0742  1383               	bcf	3,7	;select IRP bank0
   659     0743  0800               	movf	0,w
   660     0744  00A9               	movwf	sprintf@val
   661     0745  0A84               	incf	4,f
   662     0746  0800               	movf	0,w
   663     0747  00AA               	movwf	sprintf@val+1
   664     0748                     l1059:
   665     0748  3002               	movlw	2
   666     0749  00FF               	movwf	btemp+1
   667     074A  087F               	movf	btemp+1,w
   668     074B  07A6               	addwf	sprintf@ap,f
   669     074C                     l1061:
   670                           
   671                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
   672     074C  1FAA               	btfss	sprintf@val+1,7
   673     074D  2F4F               	goto	u551
   674     074E  2F50               	goto	u550
   675     074F                     u551:
   676     074F  2F59               	goto	l1067
   677     0750                     u550:
   678     0750                     l1063:
   679                           
   680                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
   681     0750  3003               	movlw	3
   682     0751  00FF               	movwf	btemp+1
   683     0752  087F               	movf	btemp+1,w
   684     0753  04A7               	iorwf	sprintf@flag,f
   685     0754                     l1065:
   686                           
   687                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
   688     0754  09A9               	comf	sprintf@val,f
   689     0755  09AA               	comf	sprintf@val+1,f
   690     0756  0AA9               	incf	sprintf@val,f
   691     0757  1903               	skipnz
   692     0758  0AAA               	incf	sprintf@val+1,f
   693     0759                     l1067:
   694                           
   695                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
   696     0759  01AC               	clrf	sprintf@c
   697     075A  0AAC               	incf	sprintf@c,f
   698     075B                     l1073:
   699                           
   700                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
   701     075B  082C               	movf	sprintf@c,w
   702     075C  00A3               	movwf	??_sprintf
   703     075D  0723               	addwf	??_sprintf,w
   704     075E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   705     075F  0084               	movwf	4
   706     0760  120A  118A  2003  120A  118A  	fcall	stringdir
   707     0765  00A4               	movwf	??_sprintf+1
   708     0766  120A  118A  2003  120A  118A  	fcall	stringdir
   709     076B  00A5               	movwf	??_sprintf+2
   710     076C  0825               	movf	??_sprintf+2,w
   711     076D  022A               	subwf	sprintf@val+1,w
   712     076E  1D03               	skipz
   713     076F  2F72               	goto	u565
   714     0770  0824               	movf	??_sprintf+1,w
   715     0771  0229               	subwf	sprintf@val,w
   716     0772                     u565:
   717     0772  1803               	skipnc
   718     0773  2F75               	goto	u561
   719     0774  2F76               	goto	u560
   720     0775                     u561:
   721     0775  2F77               	goto	l1077
   722     0776                     u560:
   723     0776  2F81               	goto	l1081
   724     0777                     l1077:
   725     0777  3001               	movlw	1
   726     0778  00FF               	movwf	btemp+1
   727     0779  087F               	movf	btemp+1,w
   728     077A  07AC               	addwf	sprintf@c,f
   729     077B                     l1079:
   730     077B  3005               	movlw	5
   731     077C  062C               	xorwf	sprintf@c,w
   732     077D  1D03               	btfss	3,2
   733     077E  2F80               	goto	u571
   734     077F  2F81               	goto	u570
   735     0780                     u571:
   736     0780  2F5B               	goto	l1073
   737     0781                     u570:
   738     0781                     l1081:
   739                           
   740                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
   741     0781  0827               	movf	sprintf@flag,w
   742     0782  3903               	andlw	3
   743     0783  1903               	btfsc	3,2
   744     0784  2F86               	goto	u581
   745     0785  2F87               	goto	u580
   746     0786                     u581:
   747     0786  2F90               	goto	l1087
   748     0787                     u580:
   749     0787                     l1083:
   750                           
   751                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
   752     0787  082B               	movf	sprintf@sp,w
   753     0788  0084               	movwf	4
   754     0789  302D               	movlw	45
   755     078A  1383               	bcf	3,7	;select IRP bank0
   756     078B  0080               	movwf	0
   757     078C                     l1085:
   758     078C  3001               	movlw	1
   759     078D  00FF               	movwf	btemp+1
   760     078E  087F               	movf	btemp+1,w
   761     078F  07AB               	addwf	sprintf@sp,f
   762     0790                     l1087:
   763                           
   764                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
   765     0790  082C               	movf	sprintf@c,w
   766     0791  00A8               	movwf	sprintf@prec
   767                           
   768                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   769     0792  2FC8               	goto	l1095
   770     0793                     l1089:
   771                           
   772                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
   773     0793  300A               	movlw	10
   774     0794  00F7               	movwf	___lwmod@divisor
   775     0795  3000               	movlw	0
   776     0796  00F8               	movwf	___lwmod@divisor+1
   777     0797  0828               	movf	sprintf@prec,w
   778     0798  00A3               	movwf	??_sprintf
   779     0799  0723               	addwf	??_sprintf,w
   780     079A  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   781     079B  0084               	movwf	4
   782     079C  120A  118A  2003  120A  118A  	fcall	stringdir
   783     07A1  00F0               	movwf	___lwdiv@divisor
   784     07A2  120A  118A  2003  120A  118A  	fcall	stringdir
   785     07A7  00F1               	movwf	___lwdiv@divisor+1
   786     07A8  082A               	movf	sprintf@val+1,w
   787     07A9  00F3               	movwf	___lwdiv@dividend+1
   788     07AA  0829               	movf	sprintf@val,w
   789     07AB  00F2               	movwf	___lwdiv@dividend
   790     07AC  120A  118A  2624  120A  118A  	fcall	___lwdiv
   791     07B1  0871               	movf	?___lwdiv+1,w
   792     07B2  00FA               	movwf	___lwmod@dividend+1
   793     07B3  0870               	movf	?___lwdiv,w
   794     07B4  00F9               	movwf	___lwmod@dividend
   795     07B5  120A  118A  25EA  120A  118A  	fcall	___lwmod
   796     07BA  0877               	movf	?___lwmod,w
   797     07BB  3E30               	addlw	48
   798     07BC  1283               	bcf	3,5	;RP0=0, select bank0
   799     07BD  1303               	bcf	3,6	;RP1=0, select bank0
   800     07BE  00AC               	movwf	sprintf@c
   801     07BF                     l1091:
   802                           
   803                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
   804     07BF  082B               	movf	sprintf@sp,w
   805     07C0  0084               	movwf	4
   806     07C1  082C               	movf	sprintf@c,w
   807     07C2  1383               	bcf	3,7	;select IRP bank0
   808     07C3  0080               	movwf	0
   809     07C4                     l1093:
   810     07C4  3001               	movlw	1
   811     07C5  00FF               	movwf	btemp+1
   812     07C6  087F               	movf	btemp+1,w
   813     07C7  07AB               	addwf	sprintf@sp,f
   814     07C8                     l1095:
   815                           
   816                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   817     07C8  30FF               	movlw	255
   818     07C9  00FF               	movwf	btemp+1
   819     07CA  087F               	movf	btemp+1,w
   820     07CB  07A8               	addwf	sprintf@prec,f
   821     07CC  0A28               	incf	sprintf@prec,w
   822     07CD  1D03               	btfss	3,2
   823     07CE  2FD0               	goto	u591
   824     07CF  2FD1               	goto	u590
   825     07D0                     u591:
   826     07D0  2F93               	goto	l1089
   827     07D1                     u590:
   828     07D1                     l1097:
   829                           
   830                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   831     07D1  3001               	movlw	1
   832     07D2  07A0               	addwf	sprintf@f,f
   833     07D3  30FF               	movlw	-1
   834     07D4  0720               	addwf	sprintf@f,w
   835     07D5  0084               	movwf	4
   836     07D6  120A  118A  2003  120A  118A  	fcall	stringdir
   837     07DB  00AC               	movwf	sprintf@c
   838     07DC  082C               	movf	sprintf@c,w
   839     07DD  1D03               	btfss	3,2
   840     07DE  2FE0               	goto	u601
   841     07DF  2FE1               	goto	u600
   842     07E0                     u601:
   843     07E0  2F12               	goto	l1045
   844     07E1                     u600:
   845     07E1                     l1099:
   846                           
   847                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
   848     07E1  082B               	movf	sprintf@sp,w
   849     07E2  0084               	movwf	4
   850     07E3  1383               	bcf	3,7	;select IRP bank0
   851     07E4  0180               	clrf	0
   852     07E5                     l181:
   853     07E5  0008               	return
   854     07E6                     __end_of_sprintf:
   855                           
   856                           	psect	text2
   857     05EA                     __ptext2:	
   858 ;; *************** function ___lwmod *****************
   859 ;; Defined at:
   860 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwmod.c"
   861 ;; Parameters:    Size  Location     Type
   862 ;;  divisor         2    7[COMMON] unsigned int 
   863 ;;  dividend        2    9[COMMON] unsigned int 
   864 ;; Auto vars:     Size  Location     Type
   865 ;;  counter         1   11[COMMON] unsigned char 
   866 ;; Return value:  Size  Location     Type
   867 ;;                  2    7[COMMON] unsigned int 
   868 ;; Registers used:
   869 ;;		wreg, status,2, status,0, btemp+1
   870 ;; Tracked objects:
   871 ;;		On entry : 0/0
   872 ;;		On exit  : 0/0
   873 ;;		Unchanged: 0/0
   874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   875 ;;      Params:         4       0       0       0       0
   876 ;;      Locals:         1       0       0       0       0
   877 ;;      Temps:          0       0       0       0       0
   878 ;;      Totals:         5       0       0       0       0
   879 ;;Total ram usage:        5 bytes
   880 ;; Hardware stack levels used: 1
   881 ;; This function calls:
   882 ;;		Nothing
   883 ;; This function is called by:
   884 ;;		_sprintf
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888     05EA                     ___lwmod:	
   889                           ;psect for function ___lwmod
   890                           
   891     05EA                     l983:	
   892                           ;incstack = 0
   893                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
   894                           
   895     05EA  0877               	movf	___lwmod@divisor,w
   896     05EB  0478               	iorwf	___lwmod@divisor+1,w
   897     05EC  1903               	btfsc	3,2
   898     05ED  2DEF               	goto	u431
   899     05EE  2DF0               	goto	u430
   900     05EF                     u431:
   901     05EF  2E1F               	goto	l1001
   902     05F0                     u430:
   903     05F0                     l985:
   904     05F0  01FB               	clrf	___lwmod@counter
   905     05F1  0AFB               	incf	___lwmod@counter,f
   906     05F2  2DFE               	goto	l991
   907     05F3                     l987:
   908     05F3  3001               	movlw	1
   909     05F4                     u445:
   910     05F4  1003               	clrc
   911     05F5  0DF7               	rlf	___lwmod@divisor,f
   912     05F6  0DF8               	rlf	___lwmod@divisor+1,f
   913     05F7  3EFF               	addlw	-1
   914     05F8  1D03               	skipz
   915     05F9  2DF4               	goto	u445
   916     05FA                     l989:
   917     05FA  3001               	movlw	1
   918     05FB  00FF               	movwf	btemp+1
   919     05FC  087F               	movf	btemp+1,w
   920     05FD  07FB               	addwf	___lwmod@counter,f
   921     05FE                     l991:
   922     05FE  1FF8               	btfss	___lwmod@divisor+1,7
   923     05FF  2E01               	goto	u451
   924     0600  2E02               	goto	u450
   925     0601                     u451:
   926     0601  2DF3               	goto	l987
   927     0602                     u450:
   928     0602                     l993:
   929     0602  0878               	movf	___lwmod@divisor+1,w
   930     0603  027A               	subwf	___lwmod@dividend+1,w
   931     0604  1D03               	skipz
   932     0605  2E08               	goto	u465
   933     0606  0877               	movf	___lwmod@divisor,w
   934     0607  0279               	subwf	___lwmod@dividend,w
   935     0608                     u465:
   936     0608  1C03               	skipc
   937     0609  2E0B               	goto	u461
   938     060A  2E0C               	goto	u460
   939     060B                     u461:
   940     060B  2E12               	goto	l997
   941     060C                     u460:
   942     060C                     l995:
   943     060C  0877               	movf	___lwmod@divisor,w
   944     060D  02F9               	subwf	___lwmod@dividend,f
   945     060E  0878               	movf	___lwmod@divisor+1,w
   946     060F  1C03               	skipc
   947     0610  03FA               	decf	___lwmod@dividend+1,f
   948     0611  02FA               	subwf	___lwmod@dividend+1,f
   949     0612                     l997:
   950     0612  3001               	movlw	1
   951     0613                     u475:
   952     0613  1003               	clrc
   953     0614  0CF8               	rrf	___lwmod@divisor+1,f
   954     0615  0CF7               	rrf	___lwmod@divisor,f
   955     0616  3EFF               	addlw	-1
   956     0617  1D03               	skipz
   957     0618  2E13               	goto	u475
   958     0619                     l999:
   959     0619  3001               	movlw	1
   960     061A  02FB               	subwf	___lwmod@counter,f
   961     061B  1D03               	btfss	3,2
   962     061C  2E1E               	goto	u481
   963     061D  2E1F               	goto	u480
   964     061E                     u481:
   965     061E  2E02               	goto	l993
   966     061F                     u480:
   967     061F                     l1001:
   968     061F  087A               	movf	___lwmod@dividend+1,w
   969     0620  00F8               	movwf	?___lwmod+1
   970     0621  0879               	movf	___lwmod@dividend,w
   971     0622  00F7               	movwf	?___lwmod
   972     0623                     l467:
   973     0623  0008               	return
   974     0624                     __end_of___lwmod:
   975                           
   976                           	psect	text3
   977     0624                     __ptext3:	
   978 ;; *************** function ___lwdiv *****************
   979 ;; Defined at:
   980 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwdiv.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;  divisor         2    0[COMMON] unsigned int 
   983 ;;  dividend        2    2[COMMON] unsigned int 
   984 ;; Auto vars:     Size  Location     Type
   985 ;;  quotient        2    4[COMMON] unsigned int 
   986 ;;  counter         1    6[COMMON] unsigned char 
   987 ;; Return value:  Size  Location     Type
   988 ;;                  2    0[COMMON] unsigned int 
   989 ;; Registers used:
   990 ;;		wreg, status,2, status,0, btemp+1
   991 ;; Tracked objects:
   992 ;;		On entry : 0/0
   993 ;;		On exit  : 0/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   996 ;;      Params:         4       0       0       0       0
   997 ;;      Locals:         3       0       0       0       0
   998 ;;      Temps:          0       0       0       0       0
   999 ;;      Totals:         7       0       0       0       0
  1000 ;;Total ram usage:        7 bytes
  1001 ;; Hardware stack levels used: 1
  1002 ;; This function calls:
  1003 ;;		Nothing
  1004 ;; This function is called by:
  1005 ;;		_sprintf
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009     0624                     ___lwdiv:	
  1010                           ;psect for function ___lwdiv
  1011                           
  1012     0624                     l957:	
  1013                           ;incstack = 0
  1014                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  1015                           
  1016     0624  01F4               	clrf	___lwdiv@quotient
  1017     0625  01F5               	clrf	___lwdiv@quotient+1
  1018     0626                     l959:
  1019     0626  0870               	movf	___lwdiv@divisor,w
  1020     0627  0471               	iorwf	___lwdiv@divisor+1,w
  1021     0628  1903               	btfsc	3,2
  1022     0629  2E2B               	goto	u361
  1023     062A  2E2C               	goto	u360
  1024     062B                     u361:
  1025     062B  2E63               	goto	l979
  1026     062C                     u360:
  1027     062C                     l961:
  1028     062C  01F6               	clrf	___lwdiv@counter
  1029     062D  0AF6               	incf	___lwdiv@counter,f
  1030     062E  2E3A               	goto	l967
  1031     062F                     l963:
  1032     062F  3001               	movlw	1
  1033     0630                     u375:
  1034     0630  1003               	clrc
  1035     0631  0DF0               	rlf	___lwdiv@divisor,f
  1036     0632  0DF1               	rlf	___lwdiv@divisor+1,f
  1037     0633  3EFF               	addlw	-1
  1038     0634  1D03               	skipz
  1039     0635  2E30               	goto	u375
  1040     0636                     l965:
  1041     0636  3001               	movlw	1
  1042     0637  00FF               	movwf	btemp+1
  1043     0638  087F               	movf	btemp+1,w
  1044     0639  07F6               	addwf	___lwdiv@counter,f
  1045     063A                     l967:
  1046     063A  1FF1               	btfss	___lwdiv@divisor+1,7
  1047     063B  2E3D               	goto	u381
  1048     063C  2E3E               	goto	u380
  1049     063D                     u381:
  1050     063D  2E2F               	goto	l963
  1051     063E                     u380:
  1052     063E                     l969:
  1053     063E  3001               	movlw	1
  1054     063F                     u395:
  1055     063F  1003               	clrc
  1056     0640  0DF4               	rlf	___lwdiv@quotient,f
  1057     0641  0DF5               	rlf	___lwdiv@quotient+1,f
  1058     0642  3EFF               	addlw	-1
  1059     0643  1D03               	skipz
  1060     0644  2E3F               	goto	u395
  1061     0645  0871               	movf	___lwdiv@divisor+1,w
  1062     0646  0273               	subwf	___lwdiv@dividend+1,w
  1063     0647  1D03               	skipz
  1064     0648  2E4B               	goto	u405
  1065     0649  0870               	movf	___lwdiv@divisor,w
  1066     064A  0272               	subwf	___lwdiv@dividend,w
  1067     064B                     u405:
  1068     064B  1C03               	skipc
  1069     064C  2E4E               	goto	u401
  1070     064D  2E4F               	goto	u400
  1071     064E                     u401:
  1072     064E  2E56               	goto	l975
  1073     064F                     u400:
  1074     064F                     l971:
  1075     064F  0870               	movf	___lwdiv@divisor,w
  1076     0650  02F2               	subwf	___lwdiv@dividend,f
  1077     0651  0871               	movf	___lwdiv@divisor+1,w
  1078     0652  1C03               	skipc
  1079     0653  03F3               	decf	___lwdiv@dividend+1,f
  1080     0654  02F3               	subwf	___lwdiv@dividend+1,f
  1081     0655                     l973:
  1082     0655  1474               	bsf	___lwdiv@quotient,0
  1083     0656                     l975:
  1084     0656  3001               	movlw	1
  1085     0657                     u415:
  1086     0657  1003               	clrc
  1087     0658  0CF1               	rrf	___lwdiv@divisor+1,f
  1088     0659  0CF0               	rrf	___lwdiv@divisor,f
  1089     065A  3EFF               	addlw	-1
  1090     065B  1D03               	skipz
  1091     065C  2E57               	goto	u415
  1092     065D                     l977:
  1093     065D  3001               	movlw	1
  1094     065E  02F6               	subwf	___lwdiv@counter,f
  1095     065F  1D03               	btfss	3,2
  1096     0660  2E62               	goto	u421
  1097     0661  2E63               	goto	u420
  1098     0662                     u421:
  1099     0662  2E3E               	goto	l969
  1100     0663                     u420:
  1101     0663                     l979:
  1102     0663  0875               	movf	___lwdiv@quotient+1,w
  1103     0664  00F1               	movwf	?___lwdiv+1
  1104     0665  0874               	movf	___lwdiv@quotient,w
  1105     0666  00F0               	movwf	?___lwdiv
  1106     0667                     l457:
  1107     0667  0008               	return
  1108     0668                     __end_of___lwdiv:
  1109                           
  1110                           	psect	text4
  1111     054A                     __ptext4:	
  1112 ;; *************** function _Lcd_Write_String *****************
  1113 ;; Defined at:
  1114 ;;		line 97 in file "./lcd.h"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;  a               1    wreg     PTR unsigned char 
  1117 ;;		 -> buff(10), 
  1118 ;; Auto vars:     Size  Location     Type
  1119 ;;  a               1    8[COMMON] PTR unsigned char 
  1120 ;;		 -> buff(10), 
  1121 ;;  i               2    6[COMMON] int 
  1122 ;; Return value:  Size  Location     Type
  1123 ;;                  1    wreg      void 
  1124 ;; Registers used:
  1125 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1126 ;; Tracked objects:
  1127 ;;		On entry : 0/0
  1128 ;;		On exit  : 0/0
  1129 ;;		Unchanged: 0/0
  1130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1131 ;;      Params:         0       0       0       0       0
  1132 ;;      Locals:         3       0       0       0       0
  1133 ;;      Temps:          1       0       0       0       0
  1134 ;;      Totals:         4       0       0       0       0
  1135 ;;Total ram usage:        4 bytes
  1136 ;; Hardware stack levels used: 1
  1137 ;; Hardware stack levels required when called: 2
  1138 ;; This function calls:
  1139 ;;		_Lcd_Write_Char
  1140 ;; This function is called by:
  1141 ;;		_main
  1142 ;; This function uses a non-reentrant model
  1143 ;;
  1144                           
  1145     054A                     _Lcd_Write_String:	
  1146                           ;psect for function _Lcd_Write_String
  1147                           
  1148                           
  1149                           ;incstack = 0
  1150                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1151                           ;Lcd_Write_String@a stored from wreg
  1152     054A  00F8               	movwf	Lcd_Write_String@a
  1153     054B                     l1035:
  1154                           
  1155                           ;./lcd.h: 97: void Lcd_Write_String(char *a);./lcd.h: 98: {;./lcd.h: 99:  int i;;./lcd.h
      +                          : 100:  for(i=0;a[i]!='\0';i++)
  1156     054B  01F6               	clrf	Lcd_Write_String@i
  1157     054C  01F7               	clrf	Lcd_Write_String@i+1
  1158     054D  2D5F               	goto	l1041
  1159     054E                     l1037:
  1160                           
  1161                           ;./lcd.h: 101:     Lcd_Write_Char(a[i]);
  1162     054E  0876               	movf	Lcd_Write_String@i,w
  1163     054F  0778               	addwf	Lcd_Write_String@a,w
  1164     0550  00F5               	movwf	??_Lcd_Write_String
  1165     0551  0875               	movf	??_Lcd_Write_String,w
  1166     0552  0084               	movwf	4
  1167     0553  0800               	movf	0,w
  1168     0554  120A  118A  25B5  120A  118A  	fcall	_Lcd_Write_Char
  1169     0559                     l1039:
  1170     0559  3001               	movlw	1
  1171     055A  07F6               	addwf	Lcd_Write_String@i,f
  1172     055B  1803               	skipnc
  1173     055C  0AF7               	incf	Lcd_Write_String@i+1,f
  1174     055D  3000               	movlw	0
  1175     055E  07F7               	addwf	Lcd_Write_String@i+1,f
  1176     055F                     l1041:
  1177     055F  0876               	movf	Lcd_Write_String@i,w
  1178     0560  0778               	addwf	Lcd_Write_String@a,w
  1179     0561  00F5               	movwf	??_Lcd_Write_String
  1180     0562  0875               	movf	??_Lcd_Write_String,w
  1181     0563  0084               	movwf	4
  1182     0564  1383               	bcf	3,7	;select IRP bank0
  1183     0565  0800               	movf	0,w
  1184     0566  1D03               	btfss	3,2
  1185     0567  2D69               	goto	u531
  1186     0568  2D6A               	goto	u530
  1187     0569                     u531:
  1188     0569  2D4E               	goto	l1037
  1189     056A                     u530:
  1190     056A                     l53:
  1191     056A  0008               	return
  1192     056B                     __end_of_Lcd_Write_String:
  1193                           
  1194                           	psect	text5
  1195     05B5                     __ptext5:	
  1196 ;; *************** function _Lcd_Write_Char *****************
  1197 ;; Defined at:
  1198 ;;		line 81 in file "./lcd.h"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;  a               1    wreg     unsigned char 
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  a               1    4[COMMON] unsigned char 
  1203 ;;  y               1    3[COMMON] unsigned char 
  1204 ;;  temp            1    2[COMMON] unsigned char 
  1205 ;; Return value:  Size  Location     Type
  1206 ;;                  1    wreg      void 
  1207 ;; Registers used:
  1208 ;;		wreg, status,2, status,0, pclath, cstack
  1209 ;; Tracked objects:
  1210 ;;		On entry : 0/0
  1211 ;;		On exit  : 0/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1214 ;;      Params:         0       0       0       0       0
  1215 ;;      Locals:         3       0       0       0       0
  1216 ;;      Temps:          1       0       0       0       0
  1217 ;;      Totals:         4       0       0       0       0
  1218 ;;Total ram usage:        4 bytes
  1219 ;; Hardware stack levels used: 1
  1220 ;; Hardware stack levels required when called: 1
  1221 ;; This function calls:
  1222 ;;		_Lcd_Port
  1223 ;; This function is called by:
  1224 ;;		_Lcd_Write_String
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228     05B5                     _Lcd_Write_Char:	
  1229                           ;psect for function _Lcd_Write_Char
  1230                           
  1231                           
  1232                           ;incstack = 0
  1233                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1234                           ;Lcd_Write_Char@a stored from wreg
  1235     05B5  00F4               	movwf	Lcd_Write_Char@a
  1236     05B6                     l937:
  1237                           
  1238                           ;./lcd.h: 81: void Lcd_Write_Char(char a);./lcd.h: 82: {;./lcd.h: 83:    char temp,y;;./
      +                          lcd.h: 84:    temp = a&0x0F;
  1239     05B6  0874               	movf	Lcd_Write_Char@a,w
  1240     05B7  390F               	andlw	15
  1241     05B8  00F2               	movwf	Lcd_Write_Char@temp
  1242                           
  1243                           ;./lcd.h: 85:    y = a&0xF0;
  1244     05B9  0874               	movf	Lcd_Write_Char@a,w
  1245     05BA  39F0               	andlw	240
  1246     05BB  00F3               	movwf	Lcd_Write_Char@y
  1247     05BC                     l939:
  1248                           
  1249                           ;./lcd.h: 86:    RD2 = 1;
  1250     05BC  1283               	bcf	3,5	;RP0=0, select bank0
  1251     05BD  1303               	bcf	3,6	;RP1=0, select bank0
  1252     05BE  1508               	bsf	8,2	;volatile
  1253     05BF                     l941:
  1254                           
  1255                           ;./lcd.h: 87:    Lcd_Port(y>>4);
  1256     05BF  0873               	movf	Lcd_Write_Char@y,w
  1257     05C0  00F1               	movwf	??_Lcd_Write_Char
  1258     05C1  3004               	movlw	4
  1259     05C2                     u355:
  1260     05C2  1003               	clrc
  1261     05C3  0CF1               	rrf	??_Lcd_Write_Char,f
  1262     05C4  3EFF               	addlw	-1
  1263     05C5  1D03               	skipz
  1264     05C6  2DC2               	goto	u355
  1265     05C7  0871               	movf	??_Lcd_Write_Char,w
  1266     05C8  120A  118A  256B  120A  118A  	fcall	_Lcd_Port
  1267     05CD                     l943:
  1268                           
  1269                           ;./lcd.h: 88:    RD3 = 1;
  1270     05CD  1283               	bcf	3,5	;RP0=0, select bank0
  1271     05CE  1303               	bcf	3,6	;RP1=0, select bank0
  1272     05CF  1588               	bsf	8,3	;volatile
  1273     05D0                     l945:
  1274                           
  1275                           ;./lcd.h: 89:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  1276     05D0  3042               	movlw	66
  1277     05D1  00F1               	movwf	??_Lcd_Write_Char
  1278     05D2                     u617:
  1279     05D2  0BF1               	decfsz	??_Lcd_Write_Char,f
  1280     05D3  2DD2               	goto	u617
  1281     05D4  0000               	nop
  1282     05D5                     l947:
  1283                           
  1284                           ;./lcd.h: 90:    RD3 = 0;
  1285     05D5  1283               	bcf	3,5	;RP0=0, select bank0
  1286     05D6  1303               	bcf	3,6	;RP1=0, select bank0
  1287     05D7  1188               	bcf	8,3	;volatile
  1288     05D8                     l949:
  1289                           
  1290                           ;./lcd.h: 91:    Lcd_Port(temp);
  1291     05D8  0872               	movf	Lcd_Write_Char@temp,w
  1292     05D9  120A  118A  256B  120A  118A  	fcall	_Lcd_Port
  1293     05DE                     l951:
  1294                           
  1295                           ;./lcd.h: 92:    RD3 = 1;
  1296     05DE  1283               	bcf	3,5	;RP0=0, select bank0
  1297     05DF  1303               	bcf	3,6	;RP1=0, select bank0
  1298     05E0  1588               	bsf	8,3	;volatile
  1299     05E1                     l953:
  1300                           
  1301                           ;./lcd.h: 93:    _delay((unsigned long)((40)*(20000000/4000000.0)));
  1302     05E1  3042               	movlw	66
  1303     05E2  00F1               	movwf	??_Lcd_Write_Char
  1304     05E3                     u627:
  1305     05E3  0BF1               	decfsz	??_Lcd_Write_Char,f
  1306     05E4  2DE3               	goto	u627
  1307     05E5  0000               	nop
  1308     05E6                     l955:
  1309                           
  1310                           ;./lcd.h: 94:    RD3 = 0;
  1311     05E6  1283               	bcf	3,5	;RP0=0, select bank0
  1312     05E7  1303               	bcf	3,6	;RP1=0, select bank0
  1313     05E8  1188               	bcf	8,3	;volatile
  1314     05E9                     l47:
  1315     05E9  0008               	return
  1316     05EA                     __end_of_Lcd_Write_Char:
  1317                           
  1318                           	psect	text6
  1319     0668                     __ptext6:	
  1320 ;; *************** function _Lcd_Set_Cursor *****************
  1321 ;; Defined at:
  1322 ;;		line 41 in file "./lcd.h"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;  a               1    wreg     unsigned char 
  1325 ;;  b               1    4[COMMON] unsigned char 
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;  a               1    6[COMMON] unsigned char 
  1328 ;;  temp            1    9[COMMON] unsigned char 
  1329 ;;  y               1    8[COMMON] unsigned char 
  1330 ;;  z               1    7[COMMON] unsigned char 
  1331 ;; Return value:  Size  Location     Type
  1332 ;;                  1    wreg      void 
  1333 ;; Registers used:
  1334 ;;		wreg, status,2, status,0, pclath, cstack
  1335 ;; Tracked objects:
  1336 ;;		On entry : 0/0
  1337 ;;		On exit  : 0/0
  1338 ;;		Unchanged: 0/0
  1339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1340 ;;      Params:         1       0       0       0       0
  1341 ;;      Locals:         4       0       0       0       0
  1342 ;;      Temps:          1       0       0       0       0
  1343 ;;      Totals:         6       0       0       0       0
  1344 ;;Total ram usage:        6 bytes
  1345 ;; Hardware stack levels used: 1
  1346 ;; Hardware stack levels required when called: 2
  1347 ;; This function calls:
  1348 ;;		_Lcd_Cmd
  1349 ;; This function is called by:
  1350 ;;		_main
  1351 ;; This function uses a non-reentrant model
  1352 ;;
  1353                           
  1354     0668                     _Lcd_Set_Cursor:	
  1355                           ;psect for function _Lcd_Set_Cursor
  1356                           
  1357                           
  1358                           ;incstack = 0
  1359                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1360                           ;Lcd_Set_Cursor@a stored from wreg
  1361     0668  00F6               	movwf	Lcd_Set_Cursor@a
  1362     0669                     l1005:
  1363                           
  1364                           ;./lcd.h: 41: void Lcd_Set_Cursor(char a, char b);./lcd.h: 42: {;./lcd.h: 43:  char temp
      +                          ,z,y;;./lcd.h: 44:  if(a == 1)
  1365     0669  0376               	decf	Lcd_Set_Cursor@a,w
  1366     066A  1D03               	btfss	3,2
  1367     066B  2E6D               	goto	u491
  1368     066C  2E6E               	goto	u490
  1369     066D                     u491:
  1370     066D  2E8B               	goto	l1015
  1371     066E                     u490:
  1372     066E                     l1007:
  1373                           
  1374                           ;./lcd.h: 45:  {;./lcd.h: 46:    temp = 0x80 + b - 1;
  1375     066E  0874               	movf	Lcd_Set_Cursor@b,w
  1376     066F  3E7F               	addlw	127
  1377     0670  00F9               	movwf	Lcd_Set_Cursor@temp
  1378                           
  1379                           ;./lcd.h: 47:   z = temp>>4;
  1380     0671  0879               	movf	Lcd_Set_Cursor@temp,w
  1381     0672  00F5               	movwf	??_Lcd_Set_Cursor
  1382     0673  3004               	movlw	4
  1383     0674                     u505:
  1384     0674  1003               	clrc
  1385     0675  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1386     0676  3EFF               	addlw	-1
  1387     0677  1D03               	skipz
  1388     0678  2E74               	goto	u505
  1389     0679  0875               	movf	??_Lcd_Set_Cursor,w
  1390     067A  00F7               	movwf	Lcd_Set_Cursor@z
  1391     067B                     l1009:
  1392                           
  1393                           ;./lcd.h: 48:   y = temp & 0x0F;
  1394     067B  0879               	movf	Lcd_Set_Cursor@temp,w
  1395     067C  390F               	andlw	15
  1396     067D  00F8               	movwf	Lcd_Set_Cursor@y
  1397     067E                     l1011:
  1398                           
  1399                           ;./lcd.h: 49:   Lcd_Cmd(z);
  1400     067E  0877               	movf	Lcd_Set_Cursor@z,w
  1401     067F  120A  118A  2530  120A  118A  	fcall	_Lcd_Cmd
  1402     0684                     l1013:
  1403                           
  1404                           ;./lcd.h: 50:   Lcd_Cmd(y);
  1405     0684  0878               	movf	Lcd_Set_Cursor@y,w
  1406     0685  120A  118A  2530  120A  118A  	fcall	_Lcd_Cmd
  1407                           
  1408                           ;./lcd.h: 51:  }
  1409     068A  2EAD               	goto	l41
  1410     068B                     l1015:
  1411     068B  3002               	movlw	2
  1412     068C  0676               	xorwf	Lcd_Set_Cursor@a,w
  1413     068D  1D03               	btfss	3,2
  1414     068E  2E90               	goto	u511
  1415     068F  2E91               	goto	u510
  1416     0690                     u511:
  1417     0690  2EAD               	goto	l41
  1418     0691                     u510:
  1419     0691                     l1017:
  1420                           
  1421                           ;./lcd.h: 53:  {;./lcd.h: 54:   temp = 0xC0 + b - 1;
  1422     0691  0874               	movf	Lcd_Set_Cursor@b,w
  1423     0692  3EBF               	addlw	191
  1424     0693  00F9               	movwf	Lcd_Set_Cursor@temp
  1425                           
  1426                           ;./lcd.h: 55:   z = temp>>4;
  1427     0694  0879               	movf	Lcd_Set_Cursor@temp,w
  1428     0695  00F5               	movwf	??_Lcd_Set_Cursor
  1429     0696  3004               	movlw	4
  1430     0697                     u525:
  1431     0697  1003               	clrc
  1432     0698  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1433     0699  3EFF               	addlw	-1
  1434     069A  1D03               	skipz
  1435     069B  2E97               	goto	u525
  1436     069C  0875               	movf	??_Lcd_Set_Cursor,w
  1437     069D  00F7               	movwf	Lcd_Set_Cursor@z
  1438     069E                     l1019:
  1439                           
  1440                           ;./lcd.h: 56:   y = temp & 0x0F;
  1441     069E  0879               	movf	Lcd_Set_Cursor@temp,w
  1442     069F  390F               	andlw	15
  1443     06A0  00F8               	movwf	Lcd_Set_Cursor@y
  1444     06A1                     l1021:
  1445                           
  1446                           ;./lcd.h: 57:   Lcd_Cmd(z);
  1447     06A1  0877               	movf	Lcd_Set_Cursor@z,w
  1448     06A2  120A  118A  2530  120A  118A  	fcall	_Lcd_Cmd
  1449     06A7                     l1023:
  1450                           
  1451                           ;./lcd.h: 58:   Lcd_Cmd(y);
  1452     06A7  0878               	movf	Lcd_Set_Cursor@y,w
  1453     06A8  120A  118A  2530  120A  118A  	fcall	_Lcd_Cmd
  1454     06AD                     l41:
  1455     06AD  0008               	return
  1456     06AE                     __end_of_Lcd_Set_Cursor:
  1457                           
  1458                           	psect	text7
  1459     06AE                     __ptext7:	
  1460 ;; *************** function _Lcd_Init *****************
  1461 ;; Defined at:
  1462 ;;		line 62 in file "./lcd.h"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;		None
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;		None
  1467 ;; Return value:  Size  Location     Type
  1468 ;;                  1    wreg      void 
  1469 ;; Registers used:
  1470 ;;		wreg, status,2, status,0, pclath, cstack
  1471 ;; Tracked objects:
  1472 ;;		On entry : 0/0
  1473 ;;		On exit  : 0/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1476 ;;      Params:         0       0       0       0       0
  1477 ;;      Locals:         0       0       0       0       0
  1478 ;;      Temps:          2       0       0       0       0
  1479 ;;      Totals:         2       0       0       0       0
  1480 ;;Total ram usage:        2 bytes
  1481 ;; Hardware stack levels used: 1
  1482 ;; Hardware stack levels required when called: 2
  1483 ;; This function calls:
  1484 ;;		_Lcd_Cmd
  1485 ;;		_Lcd_Port
  1486 ;; This function is called by:
  1487 ;;		_main
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491     06AE                     _Lcd_Init:	
  1492                           ;psect for function _Lcd_Init
  1493                           
  1494     06AE                     l1025:	
  1495                           ;incstack = 0
  1496                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1497                           
  1498                           
  1499                           ;./lcd.h: 64:   Lcd_Port(0x00);
  1500     06AE  3000               	movlw	0
  1501     06AF  120A  118A  256B  120A  118A  	fcall	_Lcd_Port
  1502     06B4                     l1027:
  1503                           
  1504                           ;./lcd.h: 65:    _delay((unsigned long)((20)*(20000000/4000.0)));
  1505     06B4  3082               	movlw	130
  1506     06B5  00F5               	movwf	??_Lcd_Init+1
  1507     06B6  30DD               	movlw	221
  1508     06B7  00F4               	movwf	??_Lcd_Init
  1509     06B8                     u637:
  1510     06B8  0BF4               	decfsz	??_Lcd_Init,f
  1511     06B9  2EB8               	goto	u637
  1512     06BA  0BF5               	decfsz	??_Lcd_Init+1,f
  1513     06BB  2EB8               	goto	u637
  1514     06BC  2EBD               	nop2
  1515     06BD                     l1029:
  1516                           
  1517                           ;./lcd.h: 66:   Lcd_Cmd(0x03);
  1518     06BD  3003               	movlw	3
  1519     06BE  120A  118A  2530  120A  118A  	fcall	_Lcd_Cmd
  1520                           
  1521                           ;./lcd.h: 67:  _delay((unsigned long)((5)*(20000000/4000.0)));
  1522     06C3  3021               	movlw	33
  1523     06C4  00F5               	movwf	??_Lcd_Init+1
  1524     06C5  3076               	movlw	118
  1525     06C6  00F4               	movwf	??_Lcd_Init
  1526     06C7                     u647:
  1527     06C7  0BF4               	decfsz	??_Lcd_Init,f
  1528     06C8  2EC7               	goto	u647
  1529     06C9  0BF5               	decfsz	??_Lcd_Init+1,f
  1530     06CA  2EC7               	goto	u647
  1531     06CB  0000               	nop
  1532     06CC                     l1031:
  1533                           
  1534                           ;./lcd.h: 68:   Lcd_Cmd(0x03);
  1535     06CC  3003               	movlw	3
  1536     06CD  120A  118A  2530  120A  118A  	fcall	_Lcd_Cmd
  1537     06D2                     l1033:
  1538                           
  1539                           ;./lcd.h: 69:  _delay((unsigned long)((11)*(20000000/4000.0)));
  1540     06D2  3048               	movlw	72
  1541     06D3  00F5               	movwf	??_Lcd_Init+1
  1542     06D4  306C               	movlw	108
  1543     06D5  00F4               	movwf	??_Lcd_Init
  1544     06D6                     u657:
  1545     06D6  0BF4               	decfsz	??_Lcd_Init,f
  1546     06D7  2ED6               	goto	u657
  1547     06D8  0BF5               	decfsz	??_Lcd_Init+1,f
  1548     06D9  2ED6               	goto	u657
  1549     06DA  0000               	nop
  1550                           
  1551                           ;./lcd.h: 70:   Lcd_Cmd(0x03);
  1552     06DB  3003               	movlw	3
  1553     06DC  120A  118A  2530  120A  118A  	fcall	_Lcd_Cmd
  1554                           
  1555                           ;./lcd.h: 72:   Lcd_Cmd(0x02);
  1556     06E1  3002               	movlw	2
  1557     06E2  120A  118A  2530  120A  118A  	fcall	_Lcd_Cmd
  1558                           
  1559                           ;./lcd.h: 73:   Lcd_Cmd(0x02);
  1560     06E7  3002               	movlw	2
  1561     06E8  120A  118A  2530  120A  118A  	fcall	_Lcd_Cmd
  1562                           
  1563                           ;./lcd.h: 74:   Lcd_Cmd(0x08);
  1564     06ED  3008               	movlw	8
  1565     06EE  120A  118A  2530  120A  118A  	fcall	_Lcd_Cmd
  1566                           
  1567                           ;./lcd.h: 75:   Lcd_Cmd(0x00);
  1568     06F3  3000               	movlw	0
  1569     06F4  120A  118A  2530  120A  118A  	fcall	_Lcd_Cmd
  1570                           
  1571                           ;./lcd.h: 76:   Lcd_Cmd(0x0C);
  1572     06F9  300C               	movlw	12
  1573     06FA  120A  118A  2530  120A  118A  	fcall	_Lcd_Cmd
  1574                           
  1575                           ;./lcd.h: 77:   Lcd_Cmd(0x00);
  1576     06FF  3000               	movlw	0
  1577     0700  120A  118A  2530  120A  118A  	fcall	_Lcd_Cmd
  1578                           
  1579                           ;./lcd.h: 78:   Lcd_Cmd(0x06);
  1580     0705  3006               	movlw	6
  1581     0706  120A  118A  2530  120A  118A  	fcall	_Lcd_Cmd
  1582     070B                     l44:
  1583     070B  0008               	return
  1584     070C                     __end_of_Lcd_Init:
  1585                           
  1586                           	psect	text8
  1587     0530                     __ptext8:	
  1588 ;; *************** function _Lcd_Cmd *****************
  1589 ;; Defined at:
  1590 ;;		line 26 in file "./lcd.h"
  1591 ;; Parameters:    Size  Location     Type
  1592 ;;  a               1    wreg     unsigned char 
  1593 ;; Auto vars:     Size  Location     Type
  1594 ;;  a               1    3[COMMON] unsigned char 
  1595 ;; Return value:  Size  Location     Type
  1596 ;;                  1    wreg      void 
  1597 ;; Registers used:
  1598 ;;		wreg, status,2, status,0, pclath, cstack
  1599 ;; Tracked objects:
  1600 ;;		On entry : 0/0
  1601 ;;		On exit  : 0/0
  1602 ;;		Unchanged: 0/0
  1603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1604 ;;      Params:         0       0       0       0       0
  1605 ;;      Locals:         1       0       0       0       0
  1606 ;;      Temps:          2       0       0       0       0
  1607 ;;      Totals:         3       0       0       0       0
  1608 ;;Total ram usage:        3 bytes
  1609 ;; Hardware stack levels used: 1
  1610 ;; Hardware stack levels required when called: 1
  1611 ;; This function calls:
  1612 ;;		_Lcd_Port
  1613 ;; This function is called by:
  1614 ;;		_Lcd_Set_Cursor
  1615 ;;		_Lcd_Init
  1616 ;;		_Lcd_Clear
  1617 ;;		_Lcd_Shift_Right
  1618 ;;		_Lcd_Shift_Left
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622     0530                     _Lcd_Cmd:	
  1623                           ;psect for function _Lcd_Cmd
  1624                           
  1625                           
  1626                           ;incstack = 0
  1627                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1628                           ;Lcd_Cmd@a stored from wreg
  1629     0530  00F3               	movwf	Lcd_Cmd@a
  1630     0531                     l927:
  1631                           
  1632                           ;./lcd.h: 26: void Lcd_Cmd(char a);./lcd.h: 27: {;./lcd.h: 28:  RD2 = 0;
  1633     0531  1283               	bcf	3,5	;RP0=0, select bank0
  1634     0532  1303               	bcf	3,6	;RP1=0, select bank0
  1635     0533  1108               	bcf	8,2	;volatile
  1636     0534                     l929:
  1637                           
  1638                           ;./lcd.h: 29:  Lcd_Port(a);
  1639     0534  0873               	movf	Lcd_Cmd@a,w
  1640     0535  120A  118A  256B  120A  118A  	fcall	_Lcd_Port
  1641     053A                     l931:
  1642                           
  1643                           ;./lcd.h: 30:  RD3 = 1;
  1644     053A  1283               	bcf	3,5	;RP0=0, select bank0
  1645     053B  1303               	bcf	3,6	;RP1=0, select bank0
  1646     053C  1588               	bsf	8,3	;volatile
  1647     053D                     l933:
  1648                           
  1649                           ;./lcd.h: 31:         _delay((unsigned long)((4)*(20000000/4000.0)));
  1650     053D  301A               	movlw	26
  1651     053E  00F2               	movwf	??_Lcd_Cmd+1
  1652     053F  30F8               	movlw	248
  1653     0540  00F1               	movwf	??_Lcd_Cmd
  1654     0541                     u667:
  1655     0541  0BF1               	decfsz	??_Lcd_Cmd,f
  1656     0542  2D41               	goto	u667
  1657     0543  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1658     0544  2D41               	goto	u667
  1659     0545  0000               	nop
  1660     0546                     l935:
  1661                           
  1662                           ;./lcd.h: 32:         RD3 = 0;
  1663     0546  1283               	bcf	3,5	;RP0=0, select bank0
  1664     0547  1303               	bcf	3,6	;RP1=0, select bank0
  1665     0548  1188               	bcf	8,3	;volatile
  1666     0549                     l32:
  1667     0549  0008               	return
  1668     054A                     __end_of_Lcd_Cmd:
  1669                           
  1670                           	psect	text9
  1671     056B                     __ptext9:	
  1672 ;; *************** function _Lcd_Port *****************
  1673 ;; Defined at:
  1674 ;;		line 4 in file "./lcd.h"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;  a               1    wreg     unsigned char 
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;  a               1    0[COMMON] unsigned char 
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  1    wreg      void 
  1681 ;; Registers used:
  1682 ;;		wreg
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1688 ;;      Params:         0       0       0       0       0
  1689 ;;      Locals:         1       0       0       0       0
  1690 ;;      Temps:          0       0       0       0       0
  1691 ;;      Totals:         1       0       0       0       0
  1692 ;;Total ram usage:        1 bytes
  1693 ;; Hardware stack levels used: 1
  1694 ;; This function calls:
  1695 ;;		Nothing
  1696 ;; This function is called by:
  1697 ;;		_Lcd_Cmd
  1698 ;;		_Lcd_Init
  1699 ;;		_Lcd_Write_Char
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703     056B                     _Lcd_Port:	
  1704                           ;psect for function _Lcd_Port
  1705                           
  1706                           
  1707                           ;incstack = 0
  1708                           ; Regs used in _Lcd_Port: [wreg]
  1709                           ;Lcd_Port@a stored from wreg
  1710     056B  00F0               	movwf	Lcd_Port@a
  1711     056C                     l917:
  1712                           
  1713                           ;./lcd.h: 4: void Lcd_Port(char a);./lcd.h: 5: {;./lcd.h: 6:  if(a & 1)
  1714     056C  1C70               	btfss	Lcd_Port@a,0
  1715     056D  2D6F               	goto	u311
  1716     056E  2D70               	goto	u310
  1717     056F                     u311:
  1718     056F  2D74               	goto	l21
  1719     0570                     u310:
  1720     0570                     l919:
  1721                           
  1722                           ;./lcd.h: 7:   RD4 = 1;
  1723     0570  1283               	bcf	3,5	;RP0=0, select bank0
  1724     0571  1303               	bcf	3,6	;RP1=0, select bank0
  1725     0572  1608               	bsf	8,4	;volatile
  1726     0573  2D77               	goto	l22
  1727     0574                     l21:	
  1728                           ;./lcd.h: 8:  else
  1729                           
  1730                           
  1731                           ;./lcd.h: 9:   RD4 = 0;
  1732     0574  1283               	bcf	3,5	;RP0=0, select bank0
  1733     0575  1303               	bcf	3,6	;RP1=0, select bank0
  1734     0576  1208               	bcf	8,4	;volatile
  1735     0577                     l22:
  1736                           
  1737                           ;./lcd.h: 11:  if(a & 2)
  1738     0577  1CF0               	btfss	Lcd_Port@a,1
  1739     0578  2D7A               	goto	u321
  1740     0579  2D7B               	goto	u320
  1741     057A                     u321:
  1742     057A  2D7D               	goto	l23
  1743     057B                     u320:
  1744     057B                     l921:
  1745                           
  1746                           ;./lcd.h: 12:   RD5 = 1;
  1747     057B  1688               	bsf	8,5	;volatile
  1748     057C  2D7E               	goto	l24
  1749     057D                     l23:	
  1750                           ;./lcd.h: 13:  else
  1751                           
  1752                           
  1753                           ;./lcd.h: 14:   RD5 = 0;
  1754     057D  1288               	bcf	8,5	;volatile
  1755     057E                     l24:
  1756                           
  1757                           ;./lcd.h: 16:  if(a & 4)
  1758     057E  1D70               	btfss	Lcd_Port@a,2
  1759     057F  2D81               	goto	u331
  1760     0580  2D82               	goto	u330
  1761     0581                     u331:
  1762     0581  2D84               	goto	l25
  1763     0582                     u330:
  1764     0582                     l923:
  1765                           
  1766                           ;./lcd.h: 17:   RD6 = 1;
  1767     0582  1708               	bsf	8,6	;volatile
  1768     0583  2D85               	goto	l26
  1769     0584                     l25:	
  1770                           ;./lcd.h: 18:  else
  1771                           
  1772                           
  1773                           ;./lcd.h: 19:   RD6 = 0;
  1774     0584  1308               	bcf	8,6	;volatile
  1775     0585                     l26:
  1776                           
  1777                           ;./lcd.h: 21:  if(a & 8)
  1778     0585  1DF0               	btfss	Lcd_Port@a,3
  1779     0586  2D88               	goto	u341
  1780     0587  2D89               	goto	u340
  1781     0588                     u341:
  1782     0588  2D8B               	goto	l27
  1783     0589                     u340:
  1784     0589                     l925:
  1785                           
  1786                           ;./lcd.h: 22:   RD7 = 1;
  1787     0589  1788               	bsf	8,7	;volatile
  1788     058A  2D8C               	goto	l29
  1789     058B                     l27:	
  1790                           ;./lcd.h: 23:  else
  1791                           
  1792                           
  1793                           ;./lcd.h: 24:   RD7 = 0;
  1794     058B  1388               	bcf	8,7	;volatile
  1795     058C                     l29:
  1796     058C  0008               	return
  1797     058D                     __end_of_Lcd_Port:
  1798     007E                     btemp	set	126	;btemp
  1799     007E                     wtemp0	set	126
  1800                           
  1801                           	psect	config
  1802                           
  1803                           ;Config register CONFIG @ 0x2007
  1804                           ;	Oscillator Selection bits
  1805                           ;	FOSC = HS, HS oscillator
  1806                           ;	Watchdog Timer Enable bit
  1807                           ;	WDTE = OFF, WDT disabled
  1808                           ;	Power-up Timer Enable bit
  1809                           ;	PWRTE = OFF, PWRT disabled
  1810                           ;	Brown-out Reset Enable bit
  1811                           ;	BOREN = ON, BOR enabled
  1812                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1813                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  1814                           ;	Data EEPROM Memory Code Protection bit
  1815                           ;	CPD = OFF, Data EEPROM code protection off
  1816                           ;	Flash Program Memory Write Enable bits
  1817                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1818                           ;	In-Circuit Debugger Mode bit
  1819                           ;	DEBUG = 0x1, unprogrammed default
  1820                           ;	Flash Program Memory Code Protection bit
  1821                           ;	CP = OFF, Code protection off
  1822     2007                     	org	8199
  1823     2007  3FFA               	dw	16378

Data Sizes:
    Strings     3
    Constant    10
    Data        2
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     13      25
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> buff(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 10
		 -> buff(BANK0[10]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2166
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1211
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 COMMON     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     4      0     301
                                              5 COMMON     4     4      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     456
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      D      19       5       31.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      25      12        0.0%
ABS                  0      0      25       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sat Jul 27 10:22:38 2024

                       pc 0002                        l21 0574                        l22 0577  
                      l23 057D                        l24 057E                        l32 0549  
                      l25 0584                        l41 06AD                        l26 0585  
                      l27 058B                        l44 070B                        l29 058C  
                      l53 056A                        l47 05E9                        fsr 0004  
                     l181 07E5                       l457 0667                       l467 0623  
                     l921 057B                       l923 0582                       l931 053A  
                     l925 0589                       l917 056C                       l933 053D  
                     l941 05BF                       l919 0570                       l935 0546  
                     l927 0531                       l951 05DE                       l943 05CD  
                     l929 0534                       l953 05E1                       l945 05D0  
                     l937 05B6                       l961 062C                       l955 05E6  
                     l947 05D5                       l939 05BC                       l971 064F  
                     l963 062F                       l949 05D8                       l973 0655  
                     l965 0636                       l957 0624                       l975 0656  
                     l967 063A                       l959 0626                       l991 05FE  
                     l983 05EA                       l977 065D                       l969 063E  
                     l993 0602                       l985 05F0                       l979 0663  
                     l995 060C                       l987 05F3                       l997 0612  
                     l989 05FA                       l999 0619                       _RD2 0042  
                     _RD3 0043                       _RD4 0044                       _RD5 0045  
                     _RD6 0046                       _RD7 0047                       u310 0570  
                     u311 056F                       u320 057B                       u400 064F  
                     u321 057A                       u401 064E                       u330 0582  
                     u331 0581                       u340 0589                       u420 0663  
                     u341 0588                       u421 0662                       u405 064B  
                     u510 0691                       u430 05F0                       u511 0690  
                     u415 0657                       u431 05EF                       u360 062C  
                     u600 07E1                       u505 0674                       u361 062B  
                     u601 07E0                       u530 056A                       u450 0602  
                     u355 05C2                       u531 0569                       u451 0601  
                     u380 063E                       u460 060C                       u540 0718  
                     u525 0697                       u381 063D                       u461 060B  
                     u445 05F4                       u541 0717                       u550 0750  
                     u375 0630                       u551 074F                       u480 061F  
                     u560 0776                       u617 05D2                       u481 061E  
                     u465 0608                       u561 0775                       u490 066E  
                     u570 0781                       u491 066D                       u627 05E3  
                     u395 063F                       u475 0613                       u571 0780  
                     u580 0787                       u637 06B8                       u581 0786  
                     u565 0772                       u590 07D1                       u647 06C7  
                     u591 07D0                       u657 06D6                       u667 0541  
                     fsr0 0004                       indf 0000                      l1001 061F  
                    l1011 067E                      l1021 06A1                      l1013 0684  
                    l1005 0669                      l1031 06CC                      l1023 06A7  
                    l1007 066E                      l1015 068B                      l1033 06D2  
                    l1025 06AE                      l1017 0691                      l1009 067B  
                    l1041 055F                      l1121 05AB                      l1113 058D  
                    l1027 06B4                      l1019 069E                      l1035 054B  
                    l1051 0722                      l1043 070F                      l1115 0590  
                    l1029 06BD                      l1037 054E                      l1061 074C  
                    l1045 0712                      l1117 0595                      l1039 0559  
                    l1063 0750                      l1143 0735                      l1055 0723  
                    l1047 0718                      l1119 059D                      l1081 0781  
                    l1073 075B                      l1065 0754                      l1057 0740  
                    l1049 071D                      l1091 07BF                      l1083 0787  
                    l1067 0759                      l1059 0748                      l1093 07C4  
                    l1085 078C                      l1077 0777                      l1095 07C8  
                    l1087 0790                      l1079 077B                      l1089 0793  
                    l1097 07D1                      l1099 07E1                      STR_1 0013  
       ?_Lcd_Write_String 0070                      _buff 002D                      _main 058D  
                    btemp 007E                      start 0000        ??_Lcd_Write_String 0075  
         __end_of_Lcd_Cmd 054A                     ?_main 0070           __end_of___lwdiv 0668  
         __end_of___lwmod 0624                     _TRISD 0088           __end_of_dpowers 0013  
                   pclath 000A                     status 0003                     wtemp0 007E  
         __end_of_sprintf 07E6          __end_of_Lcd_Init 070C          __end_of_Lcd_Port 058D  
         __initialization 07E6              __end_of_main 05B5                    ??_main 007C  
               ??_Lcd_Cmd 0071                 ??___lwdiv 0074                 ??___lwmod 007B  
                  _number 0037                 ??_sprintf 0023           Lcd_Set_Cursor@a 0076  
         Lcd_Set_Cursor@b 0074           Lcd_Set_Cursor@y 0078           Lcd_Set_Cursor@z 0077  
 __end_of__initialization 07FC            __pcstackCOMMON 0070              __pidataBANK0 052E  
          _Lcd_Set_Cursor 0668                 ?_Lcd_Init 0070                 ?_Lcd_Port 0070  
              __pbssBANK0 002D                __pmaintext 058D    __end_of_Lcd_Set_Cursor 06AE  
              ??_Lcd_Init 0074                ??_Lcd_Port 0070                __stringtab 0003  
          _Lcd_Write_Char 05B5                   _Lcd_Cmd 0530                   ___lwdiv 0624  
                 ___lwmod 05EA           ?_Lcd_Set_Cursor 0074                   __ptext1 070C  
                 __ptext2 05EA                   __ptext3 0624                   __ptext4 054A  
                 __ptext5 05B5                   __ptext6 0668                   __ptext7 06AE  
                 __ptext8 0530                   __ptext9 056B                   _dpowers 0009  
                 _sprintf 070C    __end_of_Lcd_Write_Char 05EA      end_of_initialization 07FC  
               Lcd_Port@a 0070           ?_Lcd_Write_Char 0070         Lcd_Write_String@a 0078  
       Lcd_Write_String@i 0076          _Lcd_Write_String 054A       start_initialization 07E6  
             __pdataBANK0 0037           Lcd_Write_Char@a 0074           Lcd_Write_Char@y 0073  
               ___latbits 0002             __pcstackBANK0 0020                  ?_Lcd_Cmd 0070  
             sprintf@flag 0027               sprintf@prec 0028          ___lwdiv@dividend 0072  
        ??_Lcd_Set_Cursor 0075                  ?___lwdiv 0070                  ?___lwmod 0077  
               __pstrings 0003          ___lwdiv@quotient 0074                  ?_sprintf 0020  
                Lcd_Cmd@a 0073               __stringbase 0008          ??_Lcd_Write_Char 0071  
                _Lcd_Init 06AE                  _Lcd_Port 056B  __end_of_Lcd_Write_String 056B  
      __end_of__stringtab 0009                sprintf@val 0029           ___lwdiv@divisor 0070  
         ___lwdiv@counter 0076        Lcd_Write_Char@temp 0072                 sprintf@ap 0026  
               sprintf@sp 002B          ___lwmod@dividend 0079                 stringcode 0003  
      Lcd_Set_Cursor@temp 0079                  sprintf@c 002C                  sprintf@f 0020  
         ___lwmod@divisor 0077           ___lwmod@counter 007B                  stringdir 0003  
                stringtab 0003  
