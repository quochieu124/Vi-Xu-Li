

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sat Jul 27 09:41:58 2024

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 22/03/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     0006                     	;# 
    59     0007                     	;# 
    60     0008                     	;# 
    61     0009                     	;# 
    62     000A                     	;# 
    63     000B                     	;# 
    64     000C                     	;# 
    65     000D                     	;# 
    66     000E                     	;# 
    67     000E                     	;# 
    68     000F                     	;# 
    69     0010                     	;# 
    70     0011                     	;# 
    71     0012                     	;# 
    72     0013                     	;# 
    73     0014                     	;# 
    74     0015                     	;# 
    75     0015                     	;# 
    76     0016                     	;# 
    77     0017                     	;# 
    78     0018                     	;# 
    79     0019                     	;# 
    80     001A                     	;# 
    81     001B                     	;# 
    82     001B                     	;# 
    83     001C                     	;# 
    84     001D                     	;# 
    85     001E                     	;# 
    86     001F                     	;# 
    87     0081                     	;# 
    88     0085                     	;# 
    89     0086                     	;# 
    90     0087                     	;# 
    91     0088                     	;# 
    92     0089                     	;# 
    93     008C                     	;# 
    94     008D                     	;# 
    95     008E                     	;# 
    96     0091                     	;# 
    97     0092                     	;# 
    98     0093                     	;# 
    99     0094                     	;# 
   100     0098                     	;# 
   101     0099                     	;# 
   102     009C                     	;# 
   103     009D                     	;# 
   104     009E                     	;# 
   105     009F                     	;# 
   106     010C                     	;# 
   107     010D                     	;# 
   108     010E                     	;# 
   109     010F                     	;# 
   110     018C                     	;# 
   111     018D                     	;# 
   112     0000                     	;# 
   113     0001                     	;# 
   114     0002                     	;# 
   115     0003                     	;# 
   116     0004                     	;# 
   117     0005                     	;# 
   118     0006                     	;# 
   119     0007                     	;# 
   120     0008                     	;# 
   121     0009                     	;# 
   122     000A                     	;# 
   123     000B                     	;# 
   124     000C                     	;# 
   125     000D                     	;# 
   126     000E                     	;# 
   127     000E                     	;# 
   128     000F                     	;# 
   129     0010                     	;# 
   130     0011                     	;# 
   131     0012                     	;# 
   132     0013                     	;# 
   133     0014                     	;# 
   134     0015                     	;# 
   135     0015                     	;# 
   136     0016                     	;# 
   137     0017                     	;# 
   138     0018                     	;# 
   139     0019                     	;# 
   140     001A                     	;# 
   141     001B                     	;# 
   142     001B                     	;# 
   143     001C                     	;# 
   144     001D                     	;# 
   145     001E                     	;# 
   146     001F                     	;# 
   147     0081                     	;# 
   148     0085                     	;# 
   149     0086                     	;# 
   150     0087                     	;# 
   151     0088                     	;# 
   152     0089                     	;# 
   153     008C                     	;# 
   154     008D                     	;# 
   155     008E                     	;# 
   156     0091                     	;# 
   157     0092                     	;# 
   158     0093                     	;# 
   159     0094                     	;# 
   160     0098                     	;# 
   161     0099                     	;# 
   162     009C                     	;# 
   163     009D                     	;# 
   164     009E                     	;# 
   165     009F                     	;# 
   166     010C                     	;# 
   167     010D                     	;# 
   168     010E                     	;# 
   169     010F                     	;# 
   170     018C                     	;# 
   171     018D                     	;# 
   172                           
   173                           	psect	idataBANK0
   174     0682                     __pidataBANK0:
   175                           
   176                           ;initializer for _segments_code
   177     0682  34C0               	retlw	192
   178     0683  34F9               	retlw	249
   179     0684  34A4               	retlw	164
   180     0685  34B0               	retlw	176
   181     0686  3499               	retlw	153
   182     0687  3492               	retlw	146
   183     0688  3482               	retlw	130
   184     0689  34F8               	retlw	248
   185     068A  3480               	retlw	128
   186     068B  3490               	retlw	144
   187                           
   188                           ;initializer for _data
   189     068C  3445               	retlw	69
   190     068D  3400               	retlw	0
   191     0006                     _PORTB	set	6
   192     0039                     _RC1	set	57
   193     0038                     _RC0	set	56
   194     0086                     _TRISB	set	134
   195     0439                     _TRISC1	set	1081
   196     0438                     _TRISC0	set	1080
   197                           
   198                           	psect	cinit
   199     07EC                     start_initialization:	
   200                           ; #config settings
   201                           
   202     07EC                     __initialization:
   203                           
   204                           ; Initialize objects allocated to BANK0
   205     07EC  1383               	bcf	3,7	;select IRP bank0
   206     07ED  302C               	movlw	low (__pdataBANK0+12)
   207     07EE  00FD               	movwf	btemp+-1
   208     07EF  3006               	movlw	high __pidataBANK0
   209     07F0  00FE               	movwf	btemp
   210     07F1  3082               	movlw	low __pidataBANK0
   211     07F2  00FF               	movwf	btemp+1
   212     07F3  3020               	movlw	low __pdataBANK0
   213     07F4  0084               	movwf	4
   214     07F5  120A  118A  2692  120A  118A  	fcall	init_ram0
   215                           
   216                           ; Clear objects allocated to COMMON
   217     07FA  01FC               	clrf	__pbssCOMMON& (0+127)
   218     07FB  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   219     07FC                     end_of_initialization:	
   220                           ;End of C runtime variable initialization code
   221                           
   222     07FC                     __end_of__initialization:
   223     07FC  0183               	clrf	3
   224     07FD  120A  118A  2EA1   	ljmp	_main	;jump to C main() function
   225                           
   226                           	psect	bssCOMMON
   227     007C                     __pbssCOMMON:
   228     007C                     _count:
   229     007C                     	ds	2
   230                           
   231                           	psect	dataBANK0
   232     0020                     __pdataBANK0:
   233     0020                     _segments_code:
   234     0020                     	ds	10
   235     002A                     _data:
   236     002A                     	ds	2
   237                           
   238                           	psect	inittext
   239     068E                     init_fetch0:	
   240                           ;	Called with low address in FSR and high address in W
   241                           
   242     068E  087E               	movf	btemp,w
   243     068F  008A               	movwf	10
   244     0690  087F               	movf	btemp+1,w
   245     0691  0082               	movwf	2
   246     0692                     init_ram0:	
   247                           ;Called with:
   248                           ;	high address of idata address in btemp 
   249                           ;	low address of idata address in btemp+1 
   250                           ;	low address of data in FSR
   251                           ;	high address + 1 of data in btemp-1
   252                           
   253     0692  120A  118A  268E  120A  118A  	fcall	init_fetch0
   254     0697  0080               	movwf	0
   255     0698  0A84               	incf	4,f
   256     0699  0804               	movf	4,w
   257     069A  067D               	xorwf	btemp+-1,w
   258     069B  1903               	btfsc	3,2
   259     069C  3400               	retlw	0
   260     069D  0AFF               	incf	btemp+1,f
   261     069E  1903               	btfsc	3,2
   262     069F  0AFE               	incf	btemp,f
   263     06A0  2E92               	goto	init_ram0
   264                           
   265                           	psect	cstackCOMMON
   266     0070                     __pcstackCOMMON:
   267     0070                     ?_main:
   268     0070                     ?___awdiv:	
   269                           ; 1 bytes @ 0x0
   270                           
   271     0070                     ?___awmod:	
   272                           ; 2 bytes @ 0x0
   273                           
   274     0070                     ___awdiv@divisor:	
   275                           ; 2 bytes @ 0x0
   276                           
   277     0070                     ___awmod@divisor:	
   278                           ; 2 bytes @ 0x0
   279                           
   280                           
   281                           ; 2 bytes @ 0x0
   282     0070                     	ds	2
   283     0072                     ___awdiv@dividend:
   284     0072                     ___awmod@dividend:	
   285                           ; 2 bytes @ 0x2
   286                           
   287                           
   288                           ; 2 bytes @ 0x2
   289     0072                     	ds	2
   290     0074                     ??___awdiv:
   291     0074                     ??___awmod:	
   292                           ; 1 bytes @ 0x4
   293                           
   294     0074                     ___awdiv@counter:	
   295                           ; 1 bytes @ 0x4
   296                           
   297     0074                     ___awmod@counter:	
   298                           ; 1 bytes @ 0x4
   299                           
   300                           
   301                           ; 1 bytes @ 0x4
   302     0074                     	ds	1
   303     0075                     ___awdiv@sign:
   304     0075                     ___awmod@sign:	
   305                           ; 1 bytes @ 0x5
   306                           
   307                           
   308                           ; 1 bytes @ 0x5
   309     0075                     	ds	1
   310     0076                     ___awdiv@quotient:
   311                           
   312                           ; 2 bytes @ 0x6
   313     0076                     	ds	2
   314     0078                     ?_display:
   315     0078                     display@numberIn:	
   316                           ; 1 bytes @ 0x8
   317                           
   318                           
   319                           ; 2 bytes @ 0x8
   320     0078                     	ds	2
   321     007A                     ??_display:
   322                           
   323                           ; 1 bytes @ 0xA
   324     007A                     	ds	2
   325     007C                     ??_main:
   326                           
   327                           	psect	cstackBANK0
   328     002C                     __pcstackBANK0:	
   329                           ; 1 bytes @ 0xC
   330                           
   331     002C                     display@chuc:
   332                           
   333                           ; 2 bytes @ 0x0
   334     002C                     	ds	2
   335     002E                     display@donvi:
   336                           
   337                           ; 2 bytes @ 0x2
   338     002E                     	ds	2
   339     0030                     display@i:
   340                           
   341                           ; 2 bytes @ 0x4
   342     0030                     	ds	2
   343                           
   344                           	psect	maintext
   345     06A1                     __pmaintext:	
   346 ;;
   347 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   348 ;;
   349 ;; *************** function _main *****************
   350 ;; Defined at:
   351 ;;		line 35 in file "buoi3.c"
   352 ;; Parameters:    Size  Location     Type
   353 ;;		None
   354 ;; Auto vars:     Size  Location     Type
   355 ;;		None
   356 ;; Return value:  Size  Location     Type
   357 ;;                  1    wreg      void 
   358 ;; Registers used:
   359 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   360 ;; Tracked objects:
   361 ;;		On entry : B00/0
   362 ;;		On exit  : 0/0
   363 ;;		Unchanged: 0/0
   364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   365 ;;      Params:         0       0       0       0       0
   366 ;;      Locals:         0       0       0       0       0
   367 ;;      Temps:          0       0       0       0       0
   368 ;;      Totals:         0       0       0       0       0
   369 ;;Total ram usage:        0 bytes
   370 ;; Hardware stack levels required when called: 2
   371 ;; This function calls:
   372 ;;		_display
   373 ;; This function is called by:
   374 ;;		Startup code after reset
   375 ;; This function uses a non-reentrant model
   376 ;;
   377                           
   378     06A1                     _main:	
   379                           ;psect for function _main
   380                           
   381     06A1                     l854:	
   382                           ;incstack = 0
   383                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   384                           
   385                           
   386                           ;buoi3.c: 37:     TRISB = 0x00;
   387     06A1  1683               	bsf	3,5	;RP0=1, select bank1
   388     06A2  1303               	bcf	3,6	;RP1=0, select bank1
   389     06A3  0186               	clrf	6	;volatile
   390     06A4                     l856:
   391                           
   392                           ;buoi3.c: 39:     TRISC0 = 0;
   393     06A4  1007               	bcf	7,0	;volatile
   394     06A5                     l858:
   395                           
   396                           ;buoi3.c: 41:     TRISC1 = 0;
   397     06A5  1087               	bcf	7,1	;volatile
   398     06A6                     l860:
   399                           
   400                           ;buoi3.c: 47:     {;buoi3.c: 51:         display(count);
   401     06A6  087D               	movf	_count+1,w
   402     06A7  00F9               	movwf	display@numberIn+1
   403     06A8  087C               	movf	_count,w
   404     06A9  00F8               	movwf	display@numberIn
   405     06AA  120A  118A  2721  120A  118A  	fcall	_display
   406     06AF                     l862:
   407                           
   408                           ;buoi3.c: 55:         count++;
   409     06AF  3001               	movlw	1
   410     06B0  07FC               	addwf	_count,f
   411     06B1  1803               	skipnc
   412     06B2  0AFD               	incf	_count+1,f
   413     06B3  3000               	movlw	0
   414     06B4  07FD               	addwf	_count+1,f
   415     06B5                     l864:
   416                           
   417                           ;buoi3.c: 56:         if(count>=99)
   418     06B5  087D               	movf	_count+1,w
   419     06B6  3A80               	xorlw	128
   420     06B7  00FF               	movwf	btemp+1
   421     06B8  3080               	movlw	128
   422     06B9  027F               	subwf	btemp+1,w
   423     06BA  1D03               	skipz
   424     06BB  2EBE               	goto	u425
   425     06BC  3063               	movlw	99
   426     06BD  027C               	subwf	_count,w
   427     06BE                     u425:
   428     06BE  1C03               	skipc
   429     06BF  2EC1               	goto	u421
   430     06C0  2EC2               	goto	u420
   431     06C1                     u421:
   432     06C1  2EA6               	goto	l860
   433     06C2                     u420:
   434     06C2                     l866:
   435                           
   436                           ;buoi3.c: 57:         {;buoi3.c: 58:             count=0;
   437     06C2  01FC               	clrf	_count
   438     06C3  01FD               	clrf	_count+1
   439     06C4  2EA6               	goto	l860
   440     06C5  120A  118A  2800   	ljmp	start
   441     06C8                     __end_of_main:
   442                           
   443                           	psect	text1
   444     0721                     __ptext1:	
   445 ;; *************** function _display *****************
   446 ;; Defined at:
   447 ;;		line 69 in file "buoi3.c"
   448 ;; Parameters:    Size  Location     Type
   449 ;;  numberIn        2    8[COMMON] int 
   450 ;; Auto vars:     Size  Location     Type
   451 ;;  i               2    4[BANK0 ] int 
   452 ;;  donvi           2    2[BANK0 ] int 
   453 ;;  chuc            2    0[BANK0 ] int 
   454 ;; Return value:  Size  Location     Type
   455 ;;                  1    wreg      void 
   456 ;; Registers used:
   457 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   458 ;; Tracked objects:
   459 ;;		On entry : 0/0
   460 ;;		On exit  : 0/0
   461 ;;		Unchanged: 0/0
   462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   463 ;;      Params:         2       0       0       0       0
   464 ;;      Locals:         0       6       0       0       0
   465 ;;      Temps:          2       0       0       0       0
   466 ;;      Totals:         4       6       0       0       0
   467 ;;Total ram usage:       10 bytes
   468 ;; Hardware stack levels used: 1
   469 ;; Hardware stack levels required when called: 1
   470 ;; This function calls:
   471 ;;		___awdiv
   472 ;;		___awmod
   473 ;; This function is called by:
   474 ;;		_main
   475 ;; This function uses a non-reentrant model
   476 ;;
   477                           
   478     0721                     _display:	
   479                           ;psect for function _display
   480                           
   481     0721                     l830:	
   482                           ;incstack = 0
   483                           ; Regs used in _display: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   484                           
   485                           
   486                           ;buoi3.c: 71:     int chuc = numberIn / 10;
   487     0721  300A               	movlw	10
   488     0722  00F0               	movwf	___awdiv@divisor
   489     0723  3000               	movlw	0
   490     0724  00F1               	movwf	___awdiv@divisor+1
   491     0725  0879               	movf	display@numberIn+1,w
   492     0726  00F3               	movwf	___awdiv@dividend+1
   493     0727  0878               	movf	display@numberIn,w
   494     0728  00F2               	movwf	___awdiv@dividend
   495     0729  120A  118A  2785  120A  118A  	fcall	___awdiv
   496     072E  0871               	movf	?___awdiv+1,w
   497     072F  1283               	bcf	3,5	;RP0=0, select bank0
   498     0730  1303               	bcf	3,6	;RP1=0, select bank0
   499     0731  00AD               	movwf	display@chuc+1
   500     0732  0870               	movf	?___awdiv,w
   501     0733  00AC               	movwf	display@chuc
   502                           
   503                           ;buoi3.c: 73:     int donvi = numberIn % 10;
   504     0734  300A               	movlw	10
   505     0735  00F0               	movwf	___awmod@divisor
   506     0736  3000               	movlw	0
   507     0737  00F1               	movwf	___awmod@divisor+1
   508     0738  0879               	movf	display@numberIn+1,w
   509     0739  00F3               	movwf	___awmod@dividend+1
   510     073A  0878               	movf	display@numberIn,w
   511     073B  00F2               	movwf	___awmod@dividend
   512     073C  120A  118A  26C8  120A  118A  	fcall	___awmod
   513     0741  0871               	movf	?___awmod+1,w
   514     0742  1283               	bcf	3,5	;RP0=0, select bank0
   515     0743  1303               	bcf	3,6	;RP1=0, select bank0
   516     0744  00AF               	movwf	display@donvi+1
   517     0745  0870               	movf	?___awmod,w
   518     0746  00AE               	movwf	display@donvi
   519     0747                     l832:
   520                           
   521                           ;buoi3.c: 77:     for(int i = 0; i < 300; i++)
   522     0747  01B0               	clrf	display@i
   523     0748  01B1               	clrf	display@i+1
   524     0749                     l838:
   525                           
   526                           ;buoi3.c: 79:     {;buoi3.c: 83:         PORTB = segments_code[chuc];
   527     0749  1283               	bcf	3,5	;RP0=0, select bank0
   528     074A  1303               	bcf	3,6	;RP1=0, select bank0
   529     074B  082C               	movf	display@chuc,w
   530     074C  3E20               	addlw	(low (_segments_code| 0))& (0+255)
   531     074D  0084               	movwf	4
   532     074E  1383               	bcf	3,7	;select IRP bank0
   533     074F  0800               	movf	0,w
   534     0750  0086               	movwf	6	;volatile
   535     0751                     l840:
   536                           
   537                           ;buoi3.c: 87:         RC0 = 1;
   538     0751  1407               	bsf	7,0	;volatile
   539     0752                     l842:
   540                           
   541                           ;buoi3.c: 91:         _delay((unsigned long)((5)*(20000000/4000.0)));
   542     0752  3021               	movlw	33
   543     0753  00FB               	movwf	??_display+1
   544     0754  3076               	movlw	118
   545     0755  00FA               	movwf	??_display
   546     0756                     u437:
   547     0756  0BFA               	decfsz	??_display,f
   548     0757  2F56               	goto	u437
   549     0758  0BFB               	decfsz	??_display+1,f
   550     0759  2F56               	goto	u437
   551     075A  0000               	nop
   552     075B                     l844:
   553                           
   554                           ;buoi3.c: 95:         RC0 = 0;
   555     075B  1283               	bcf	3,5	;RP0=0, select bank0
   556     075C  1303               	bcf	3,6	;RP1=0, select bank0
   557     075D  1007               	bcf	7,0	;volatile
   558     075E                     l846:
   559                           
   560                           ;buoi3.c: 101:         PORTB = segments_code[donvi];
   561     075E  082E               	movf	display@donvi,w
   562     075F  3E20               	addlw	(low (_segments_code| 0))& (0+255)
   563     0760  0084               	movwf	4
   564     0761  1383               	bcf	3,7	;select IRP bank0
   565     0762  0800               	movf	0,w
   566     0763  0086               	movwf	6	;volatile
   567     0764                     l848:
   568                           
   569                           ;buoi3.c: 103:         RC1 = 1;
   570     0764  1487               	bsf	7,1	;volatile
   571                           
   572                           ;buoi3.c: 105:         _delay((unsigned long)((5)*(20000000/4000.0)));
   573     0765  3021               	movlw	33
   574     0766  00FB               	movwf	??_display+1
   575     0767  3076               	movlw	118
   576     0768  00FA               	movwf	??_display
   577     0769                     u447:
   578     0769  0BFA               	decfsz	??_display,f
   579     076A  2F69               	goto	u447
   580     076B  0BFB               	decfsz	??_display+1,f
   581     076C  2F69               	goto	u447
   582     076D  0000               	nop
   583     076E                     l850:
   584                           
   585                           ;buoi3.c: 107:         RC1 = 0;
   586     076E  1283               	bcf	3,5	;RP0=0, select bank0
   587     076F  1303               	bcf	3,6	;RP1=0, select bank0
   588     0770  1087               	bcf	7,1	;volatile
   589                           
   590                           ;buoi3.c: 109:     }
   591     0771  3001               	movlw	1
   592     0772  07B0               	addwf	display@i,f
   593     0773  1803               	skipnc
   594     0774  0AB1               	incf	display@i+1,f
   595     0775  3000               	movlw	0
   596     0776  07B1               	addwf	display@i+1,f
   597     0777                     l852:
   598     0777  0831               	movf	display@i+1,w
   599     0778  3A80               	xorlw	128
   600     0779  00FF               	movwf	btemp+1
   601     077A  3081               	movlw	129
   602     077B  027F               	subwf	btemp+1,w
   603     077C  1D03               	skipz
   604     077D  2F80               	goto	u415
   605     077E  302C               	movlw	44
   606     077F  0230               	subwf	display@i,w
   607     0780                     u415:
   608     0780  1C03               	skipc
   609     0781  2F83               	goto	u411
   610     0782  2F84               	goto	u410
   611     0783                     u411:
   612     0783  2F49               	goto	l838
   613     0784                     u410:
   614     0784                     l36:
   615     0784  0008               	return
   616     0785                     __end_of_display:
   617                           
   618                           	psect	text2
   619     06C8                     __ptext2:	
   620 ;; *************** function ___awmod *****************
   621 ;; Defined at:
   622 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awmod.c"
   623 ;; Parameters:    Size  Location     Type
   624 ;;  divisor         2    0[COMMON] int 
   625 ;;  dividend        2    2[COMMON] int 
   626 ;; Auto vars:     Size  Location     Type
   627 ;;  sign            1    5[COMMON] unsigned char 
   628 ;;  counter         1    4[COMMON] unsigned char 
   629 ;; Return value:  Size  Location     Type
   630 ;;                  2    0[COMMON] int 
   631 ;; Registers used:
   632 ;;		wreg, status,2, status,0, btemp+1
   633 ;; Tracked objects:
   634 ;;		On entry : 0/0
   635 ;;		On exit  : 0/0
   636 ;;		Unchanged: 0/0
   637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   638 ;;      Params:         4       0       0       0       0
   639 ;;      Locals:         2       0       0       0       0
   640 ;;      Temps:          0       0       0       0       0
   641 ;;      Totals:         6       0       0       0       0
   642 ;;Total ram usage:        6 bytes
   643 ;; Hardware stack levels used: 1
   644 ;; This function calls:
   645 ;;		Nothing
   646 ;; This function is called by:
   647 ;;		_display
   648 ;; This function uses a non-reentrant model
   649 ;;
   650                           
   651     06C8                     ___awmod:	
   652                           ;psect for function ___awmod
   653                           
   654     06C8                     l792:	
   655                           ;incstack = 0
   656                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
   657                           
   658     06C8  01F5               	clrf	___awmod@sign
   659     06C9                     l794:
   660     06C9  1FF3               	btfss	___awmod@dividend+1,7
   661     06CA  2ECC               	goto	u321
   662     06CB  2ECD               	goto	u320
   663     06CC                     u321:
   664     06CC  2ED4               	goto	l800
   665     06CD                     u320:
   666     06CD                     l796:
   667     06CD  09F2               	comf	___awmod@dividend,f
   668     06CE  09F3               	comf	___awmod@dividend+1,f
   669     06CF  0AF2               	incf	___awmod@dividend,f
   670     06D0  1903               	skipnz
   671     06D1  0AF3               	incf	___awmod@dividend+1,f
   672     06D2                     l798:
   673     06D2  01F5               	clrf	___awmod@sign
   674     06D3  0AF5               	incf	___awmod@sign,f
   675     06D4                     l800:
   676     06D4  1FF1               	btfss	___awmod@divisor+1,7
   677     06D5  2ED7               	goto	u331
   678     06D6  2ED8               	goto	u330
   679     06D7                     u331:
   680     06D7  2EDD               	goto	l804
   681     06D8                     u330:
   682     06D8                     l802:
   683     06D8  09F0               	comf	___awmod@divisor,f
   684     06D9  09F1               	comf	___awmod@divisor+1,f
   685     06DA  0AF0               	incf	___awmod@divisor,f
   686     06DB  1903               	skipnz
   687     06DC  0AF1               	incf	___awmod@divisor+1,f
   688     06DD                     l804:
   689     06DD  0870               	movf	___awmod@divisor,w
   690     06DE  0471               	iorwf	___awmod@divisor+1,w
   691     06DF  1903               	btfsc	3,2
   692     06E0  2EE2               	goto	u341
   693     06E1  2EE3               	goto	u340
   694     06E2                     u341:
   695     06E2  2F12               	goto	l822
   696     06E3                     u340:
   697     06E3                     l806:
   698     06E3  01F4               	clrf	___awmod@counter
   699     06E4  0AF4               	incf	___awmod@counter,f
   700     06E5  2EF1               	goto	l812
   701     06E6                     l808:
   702     06E6  3001               	movlw	1
   703     06E7                     u355:
   704     06E7  1003               	clrc
   705     06E8  0DF0               	rlf	___awmod@divisor,f
   706     06E9  0DF1               	rlf	___awmod@divisor+1,f
   707     06EA  3EFF               	addlw	-1
   708     06EB  1D03               	skipz
   709     06EC  2EE7               	goto	u355
   710     06ED                     l810:
   711     06ED  3001               	movlw	1
   712     06EE  00FF               	movwf	btemp+1
   713     06EF  087F               	movf	btemp+1,w
   714     06F0  07F4               	addwf	___awmod@counter,f
   715     06F1                     l812:
   716     06F1  1FF1               	btfss	___awmod@divisor+1,7
   717     06F2  2EF4               	goto	u361
   718     06F3  2EF5               	goto	u360
   719     06F4                     u361:
   720     06F4  2EE6               	goto	l808
   721     06F5                     u360:
   722     06F5                     l814:
   723     06F5  0871               	movf	___awmod@divisor+1,w
   724     06F6  0273               	subwf	___awmod@dividend+1,w
   725     06F7  1D03               	skipz
   726     06F8  2EFB               	goto	u375
   727     06F9  0870               	movf	___awmod@divisor,w
   728     06FA  0272               	subwf	___awmod@dividend,w
   729     06FB                     u375:
   730     06FB  1C03               	skipc
   731     06FC  2EFE               	goto	u371
   732     06FD  2EFF               	goto	u370
   733     06FE                     u371:
   734     06FE  2F05               	goto	l818
   735     06FF                     u370:
   736     06FF                     l816:
   737     06FF  0870               	movf	___awmod@divisor,w
   738     0700  02F2               	subwf	___awmod@dividend,f
   739     0701  0871               	movf	___awmod@divisor+1,w
   740     0702  1C03               	skipc
   741     0703  03F3               	decf	___awmod@dividend+1,f
   742     0704  02F3               	subwf	___awmod@dividend+1,f
   743     0705                     l818:
   744     0705  3001               	movlw	1
   745     0706                     u385:
   746     0706  1003               	clrc
   747     0707  0CF1               	rrf	___awmod@divisor+1,f
   748     0708  0CF0               	rrf	___awmod@divisor,f
   749     0709  3EFF               	addlw	-1
   750     070A  1D03               	skipz
   751     070B  2F06               	goto	u385
   752     070C                     l820:
   753     070C  3001               	movlw	1
   754     070D  02F4               	subwf	___awmod@counter,f
   755     070E  1D03               	btfss	3,2
   756     070F  2F11               	goto	u391
   757     0710  2F12               	goto	u390
   758     0711                     u391:
   759     0711  2EF5               	goto	l814
   760     0712                     u390:
   761     0712                     l822:
   762     0712  0875               	movf	___awmod@sign,w
   763     0713  1903               	btfsc	3,2
   764     0714  2F16               	goto	u401
   765     0715  2F17               	goto	u400
   766     0716                     u401:
   767     0716  2F1C               	goto	l826
   768     0717                     u400:
   769     0717                     l824:
   770     0717  09F2               	comf	___awmod@dividend,f
   771     0718  09F3               	comf	___awmod@dividend+1,f
   772     0719  0AF2               	incf	___awmod@dividend,f
   773     071A  1903               	skipnz
   774     071B  0AF3               	incf	___awmod@dividend+1,f
   775     071C                     l826:
   776     071C  0873               	movf	___awmod@dividend+1,w
   777     071D  00F1               	movwf	?___awmod+1
   778     071E  0872               	movf	___awmod@dividend,w
   779     071F  00F0               	movwf	?___awmod
   780     0720                     l288:
   781     0720  0008               	return
   782     0721                     __end_of___awmod:
   783                           
   784                           	psect	text3
   785     0785                     __ptext3:	
   786 ;; *************** function ___awdiv *****************
   787 ;; Defined at:
   788 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awdiv.c"
   789 ;; Parameters:    Size  Location     Type
   790 ;;  divisor         2    0[COMMON] int 
   791 ;;  dividend        2    2[COMMON] int 
   792 ;; Auto vars:     Size  Location     Type
   793 ;;  quotient        2    6[COMMON] int 
   794 ;;  sign            1    5[COMMON] unsigned char 
   795 ;;  counter         1    4[COMMON] unsigned char 
   796 ;; Return value:  Size  Location     Type
   797 ;;                  2    0[COMMON] int 
   798 ;; Registers used:
   799 ;;		wreg, status,2, status,0, btemp+1
   800 ;; Tracked objects:
   801 ;;		On entry : 0/0
   802 ;;		On exit  : 0/0
   803 ;;		Unchanged: 0/0
   804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   805 ;;      Params:         4       0       0       0       0
   806 ;;      Locals:         4       0       0       0       0
   807 ;;      Temps:          0       0       0       0       0
   808 ;;      Totals:         8       0       0       0       0
   809 ;;Total ram usage:        8 bytes
   810 ;; Hardware stack levels used: 1
   811 ;; This function calls:
   812 ;;		Nothing
   813 ;; This function is called by:
   814 ;;		_display
   815 ;; This function uses a non-reentrant model
   816 ;;
   817                           
   818     0785                     ___awdiv:	
   819                           ;psect for function ___awdiv
   820                           
   821     0785                     l748:	
   822                           ;incstack = 0
   823                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
   824                           
   825     0785  01F5               	clrf	___awdiv@sign
   826     0786                     l750:
   827     0786  1FF1               	btfss	___awdiv@divisor+1,7
   828     0787  2F89               	goto	u221
   829     0788  2F8A               	goto	u220
   830     0789                     u221:
   831     0789  2F91               	goto	l756
   832     078A                     u220:
   833     078A                     l752:
   834     078A  09F0               	comf	___awdiv@divisor,f
   835     078B  09F1               	comf	___awdiv@divisor+1,f
   836     078C  0AF0               	incf	___awdiv@divisor,f
   837     078D  1903               	skipnz
   838     078E  0AF1               	incf	___awdiv@divisor+1,f
   839     078F                     l754:
   840     078F  01F5               	clrf	___awdiv@sign
   841     0790  0AF5               	incf	___awdiv@sign,f
   842     0791                     l756:
   843     0791  1FF3               	btfss	___awdiv@dividend+1,7
   844     0792  2F94               	goto	u231
   845     0793  2F95               	goto	u230
   846     0794                     u231:
   847     0794  2F9E               	goto	l762
   848     0795                     u230:
   849     0795                     l758:
   850     0795  09F2               	comf	___awdiv@dividend,f
   851     0796  09F3               	comf	___awdiv@dividend+1,f
   852     0797  0AF2               	incf	___awdiv@dividend,f
   853     0798  1903               	skipnz
   854     0799  0AF3               	incf	___awdiv@dividend+1,f
   855     079A                     l760:
   856     079A  3001               	movlw	1
   857     079B  00FF               	movwf	btemp+1
   858     079C  087F               	movf	btemp+1,w
   859     079D  06F5               	xorwf	___awdiv@sign,f
   860     079E                     l762:
   861     079E  01F6               	clrf	___awdiv@quotient
   862     079F  01F7               	clrf	___awdiv@quotient+1
   863     07A0                     l764:
   864     07A0  0870               	movf	___awdiv@divisor,w
   865     07A1  0471               	iorwf	___awdiv@divisor+1,w
   866     07A2  1903               	btfsc	3,2
   867     07A3  2FA5               	goto	u241
   868     07A4  2FA6               	goto	u240
   869     07A5                     u241:
   870     07A5  2FDD               	goto	l784
   871     07A6                     u240:
   872     07A6                     l766:
   873     07A6  01F4               	clrf	___awdiv@counter
   874     07A7  0AF4               	incf	___awdiv@counter,f
   875     07A8  2FB4               	goto	l772
   876     07A9                     l768:
   877     07A9  3001               	movlw	1
   878     07AA                     u255:
   879     07AA  1003               	clrc
   880     07AB  0DF0               	rlf	___awdiv@divisor,f
   881     07AC  0DF1               	rlf	___awdiv@divisor+1,f
   882     07AD  3EFF               	addlw	-1
   883     07AE  1D03               	skipz
   884     07AF  2FAA               	goto	u255
   885     07B0                     l770:
   886     07B0  3001               	movlw	1
   887     07B1  00FF               	movwf	btemp+1
   888     07B2  087F               	movf	btemp+1,w
   889     07B3  07F4               	addwf	___awdiv@counter,f
   890     07B4                     l772:
   891     07B4  1FF1               	btfss	___awdiv@divisor+1,7
   892     07B5  2FB7               	goto	u261
   893     07B6  2FB8               	goto	u260
   894     07B7                     u261:
   895     07B7  2FA9               	goto	l768
   896     07B8                     u260:
   897     07B8                     l774:
   898     07B8  3001               	movlw	1
   899     07B9                     u275:
   900     07B9  1003               	clrc
   901     07BA  0DF6               	rlf	___awdiv@quotient,f
   902     07BB  0DF7               	rlf	___awdiv@quotient+1,f
   903     07BC  3EFF               	addlw	-1
   904     07BD  1D03               	skipz
   905     07BE  2FB9               	goto	u275
   906     07BF  0871               	movf	___awdiv@divisor+1,w
   907     07C0  0273               	subwf	___awdiv@dividend+1,w
   908     07C1  1D03               	skipz
   909     07C2  2FC5               	goto	u285
   910     07C3  0870               	movf	___awdiv@divisor,w
   911     07C4  0272               	subwf	___awdiv@dividend,w
   912     07C5                     u285:
   913     07C5  1C03               	skipc
   914     07C6  2FC8               	goto	u281
   915     07C7  2FC9               	goto	u280
   916     07C8                     u281:
   917     07C8  2FD0               	goto	l780
   918     07C9                     u280:
   919     07C9                     l776:
   920     07C9  0870               	movf	___awdiv@divisor,w
   921     07CA  02F2               	subwf	___awdiv@dividend,f
   922     07CB  0871               	movf	___awdiv@divisor+1,w
   923     07CC  1C03               	skipc
   924     07CD  03F3               	decf	___awdiv@dividend+1,f
   925     07CE  02F3               	subwf	___awdiv@dividend+1,f
   926     07CF                     l778:
   927     07CF  1476               	bsf	___awdiv@quotient,0
   928     07D0                     l780:
   929     07D0  3001               	movlw	1
   930     07D1                     u295:
   931     07D1  1003               	clrc
   932     07D2  0CF1               	rrf	___awdiv@divisor+1,f
   933     07D3  0CF0               	rrf	___awdiv@divisor,f
   934     07D4  3EFF               	addlw	-1
   935     07D5  1D03               	skipz
   936     07D6  2FD1               	goto	u295
   937     07D7                     l782:
   938     07D7  3001               	movlw	1
   939     07D8  02F4               	subwf	___awdiv@counter,f
   940     07D9  1D03               	btfss	3,2
   941     07DA  2FDC               	goto	u301
   942     07DB  2FDD               	goto	u300
   943     07DC                     u301:
   944     07DC  2FB8               	goto	l774
   945     07DD                     u300:
   946     07DD                     l784:
   947     07DD  0875               	movf	___awdiv@sign,w
   948     07DE  1903               	btfsc	3,2
   949     07DF  2FE1               	goto	u311
   950     07E0  2FE2               	goto	u310
   951     07E1                     u311:
   952     07E1  2FE7               	goto	l788
   953     07E2                     u310:
   954     07E2                     l786:
   955     07E2  09F6               	comf	___awdiv@quotient,f
   956     07E3  09F7               	comf	___awdiv@quotient+1,f
   957     07E4  0AF6               	incf	___awdiv@quotient,f
   958     07E5  1903               	skipnz
   959     07E6  0AF7               	incf	___awdiv@quotient+1,f
   960     07E7                     l788:
   961     07E7  0877               	movf	___awdiv@quotient+1,w
   962     07E8  00F1               	movwf	?___awdiv+1
   963     07E9  0876               	movf	___awdiv@quotient,w
   964     07EA  00F0               	movwf	?___awdiv
   965     07EB                     l275:
   966     07EB  0008               	return
   967     07EC                     __end_of___awdiv:
   968     007E                     btemp	set	126	;btemp
   969     007E                     wtemp0	set	126
   970                           
   971                           	psect	config
   972                           
   973                           ;Config register CONFIG @ 0x2007
   974                           ;	Oscillator Selection bits
   975                           ;	FOSC = HS, HS oscillator
   976                           ;	Watchdog Timer Enable bit
   977                           ;	WDTE = OFF, WDT disabled
   978                           ;	Power-up Timer Enable bit
   979                           ;	PWRTE = OFF, PWRT disabled
   980                           ;	Brown-out Reset Enable bit
   981                           ;	BOREN = ON, BOR enabled
   982                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   983                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
   984                           ;	Data EEPROM Memory Code Protection bit
   985                           ;	CPD = OFF, Data EEPROM code protection off
   986                           ;	Flash Program Memory Write Enable bits
   987                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   988                           ;	In-Circuit Debugger Mode bit
   989                           ;	DEBUG = 0x1, unprogrammed default
   990                           ;	Flash Program Memory Code Protection bit
   991                           ;	CP = OFF, Code protection off
   992     2007                     	org	8199
   993     2007  3FFA               	dw	16378

Data Sizes:
    Strings     0
    Constant    0
    Data        12
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80      6      18
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_display
    _display->___awdiv

Critical Paths under _main in BANK0

    _main->_display

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1112
                            _display
 ---------------------------------------------------------------------------------
 (1) _display                                             10     8      2    1112
                                              8 COMMON     4     2      2
                                              0 BANK0      6     6      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _display
     ___awdiv
     ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      6      12       5       22.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      20      12        0.0%
ABS                  0      0      20       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sat Jul 27 09:41:58 2024

                      pc 0002                       l36 0784             ___awdiv@sign 0075  
                     fsr 0004                      l275 07EB                      l288 0720  
                    l800 06D4                      l810 06ED                      l802 06D8  
                    l820 070C                      l812 06F1                      l804 06DD  
                    l750 0786                      l814 06F5                      l806 06E3  
                    l822 0712                      l830 0721                      l760 079A  
                    l752 078A                      l824 0717                      l816 06FF  
                    l808 06E6                      l840 0751                      l832 0747  
                    l770 07B0                      l762 079E                      l754 078F  
                    l826 071C                      l818 0705                      l850 076E  
                    l842 0752                      l780 07D0                      l772 07B4  
                    l764 07A0                      l756 0791                      l748 0785  
                    l852 0777                      l844 075B                      l860 06A6  
                    l782 07D7                      l774 07B8                      l766 07A6  
                    l758 0795                      l846 075E                      l838 0749  
                    l862 06AF                      l854 06A1                      l776 07C9  
                    l768 07A9                      l784 07DD                      l792 06C8  
                    l848 0764                      l864 06B5                      l856 06A4  
                    l786 07E2                      l778 07CF                      l794 06C9  
                    l866 06C2                      l858 06A5                      l788 07E7  
                    l796 06CD                      l798 06D2                      _RC0 0038  
                    _RC1 0039                      u300 07DD                      u220 078A  
                    u301 07DC                      u221 0789                      u310 07E2  
                    u230 0795                      u311 07E1                      u231 0794  
                    u240 07A6                      u400 0717                      u320 06CD  
                    u241 07A5                      u401 0716                      u321 06CC  
                    u330 06D8                      u410 0784                      u331 06D7  
                    u411 0783                      u260 07B8                      u340 06E3  
                    u420 06C2                      u261 07B7                      u341 06E2  
                    u421 06C1                      u255 07AA                      u415 0780  
                    u280 07C9                      u360 06F5                      u281 07C8  
                    u361 06F4                      u425 06BE                      u370 06FF  
                    u275 07B9                      u371 06FE                      u355 06E7  
                    u285 07C5                      u437 0756                      u390 0712  
                    u295 07D1                      u391 0711                      u375 06FB  
                    u447 0769                      u385 0706                      fsr0 0004  
                    indf 0000             ___awmod@sign 0075              display@chuc 002C  
                   _data 002A                     _main 06A1                     btemp 007E  
                   start 0000                    ?_main 0070          __end_of___awdiv 07EC  
        __end_of___awmod 0721          ___awdiv@divisor 0070          ___awdiv@counter 0074  
                  _PORTB 0006                    _TRISB 0086             display@donvi 002E  
        __end_of_display 0785                    _count 007C                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07EC  
           __end_of_main 06C8                   ??_main 007C         ___awdiv@dividend 0072  
                 _TRISC0 0438                   _TRISC1 0439                ??___awdiv 0074  
              ??___awmod 0074         ___awdiv@quotient 0076          ___awmod@divisor 0070  
        ___awmod@counter 0074                ??_display 007A  __end_of__initialization 07FC  
         __pcstackCOMMON 0070             __pidataBANK0 0682               __pmaintext 06A1  
                ___awdiv 0785                  ___awmod 06C8                  __ptext1 0721  
                __ptext2 06C8                  __ptext3 0785                  _display 0721  
       ___awmod@dividend 0072     end_of_initialization 07FC      start_initialization 07EC  
             init_fetch0 068E              __pdataBANK0 0020              __pbssCOMMON 007C  
              ___latbits 0002            __pcstackBANK0 002C            _segments_code 0020  
               ?___awdiv 0070                 ?___awmod 0070                 ?_display 0078  
        display@numberIn 0078                 display@i 0030                 init_ram0 0692  
