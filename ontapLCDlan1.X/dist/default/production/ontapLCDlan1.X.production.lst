

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sat Jul 27 20:54:16 2024

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 22/03/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     0006                     	;# 
    58     0007                     	;# 
    59     0008                     	;# 
    60     0009                     	;# 
    61     000A                     	;# 
    62     000B                     	;# 
    63     000C                     	;# 
    64     000D                     	;# 
    65     000E                     	;# 
    66     000E                     	;# 
    67     000F                     	;# 
    68     0010                     	;# 
    69     0011                     	;# 
    70     0012                     	;# 
    71     0013                     	;# 
    72     0014                     	;# 
    73     0015                     	;# 
    74     0015                     	;# 
    75     0016                     	;# 
    76     0017                     	;# 
    77     0018                     	;# 
    78     0019                     	;# 
    79     001A                     	;# 
    80     001B                     	;# 
    81     001B                     	;# 
    82     001C                     	;# 
    83     001D                     	;# 
    84     001E                     	;# 
    85     001F                     	;# 
    86     0081                     	;# 
    87     0085                     	;# 
    88     0086                     	;# 
    89     0087                     	;# 
    90     0088                     	;# 
    91     0089                     	;# 
    92     008C                     	;# 
    93     008D                     	;# 
    94     008E                     	;# 
    95     0091                     	;# 
    96     0092                     	;# 
    97     0093                     	;# 
    98     0094                     	;# 
    99     0098                     	;# 
   100     0099                     	;# 
   101     009C                     	;# 
   102     009D                     	;# 
   103     009E                     	;# 
   104     009F                     	;# 
   105     010C                     	;# 
   106     010D                     	;# 
   107     010E                     	;# 
   108     010F                     	;# 
   109     018C                     	;# 
   110     018D                     	;# 
   111     0000                     	;# 
   112     0001                     	;# 
   113     0002                     	;# 
   114     0003                     	;# 
   115     0004                     	;# 
   116     0005                     	;# 
   117     0006                     	;# 
   118     0007                     	;# 
   119     0008                     	;# 
   120     0009                     	;# 
   121     000A                     	;# 
   122     000B                     	;# 
   123     000C                     	;# 
   124     000D                     	;# 
   125     000E                     	;# 
   126     000E                     	;# 
   127     000F                     	;# 
   128     0010                     	;# 
   129     0011                     	;# 
   130     0012                     	;# 
   131     0013                     	;# 
   132     0014                     	;# 
   133     0015                     	;# 
   134     0015                     	;# 
   135     0016                     	;# 
   136     0017                     	;# 
   137     0018                     	;# 
   138     0019                     	;# 
   139     001A                     	;# 
   140     001B                     	;# 
   141     001B                     	;# 
   142     001C                     	;# 
   143     001D                     	;# 
   144     001E                     	;# 
   145     001F                     	;# 
   146     0081                     	;# 
   147     0085                     	;# 
   148     0086                     	;# 
   149     0087                     	;# 
   150     0088                     	;# 
   151     0089                     	;# 
   152     008C                     	;# 
   153     008D                     	;# 
   154     008E                     	;# 
   155     0091                     	;# 
   156     0092                     	;# 
   157     0093                     	;# 
   158     0094                     	;# 
   159     0098                     	;# 
   160     0099                     	;# 
   161     009C                     	;# 
   162     009D                     	;# 
   163     009E                     	;# 
   164     009F                     	;# 
   165     010C                     	;# 
   166     010D                     	;# 
   167     010E                     	;# 
   168     010F                     	;# 
   169     018C                     	;# 
   170     018D                     	;# 
   171     0006                     _PORTBbits	set	6
   172     0043                     _RD3	set	67
   173     0042                     _RD2	set	66
   174     0047                     _RD7	set	71
   175     0046                     _RD6	set	70
   176     0045                     _RD5	set	69
   177     0044                     _RD4	set	68
   178     0088                     _TRISD	set	136
   179     0086                     _TRISB	set	134
   180                           
   181                           	psect	strings
   182     0003                     __pstrings:
   183     0003                     stringtab:
   184     0003                     __stringtab:
   185     0003                     stringcode:	
   186                           ;	String table - string pointers are 1 byte each
   187                           
   188     0003                     stringdir:
   189     0003  3000               	movlw	high stringdir
   190     0004  008A               	movwf	10
   191     0005  0804               	movf	4,w
   192     0006  0A84               	incf	4,f
   193     0007  0782               	addwf	2,f
   194     0008                     __stringbase:
   195     0008  3400               	retlw	0
   196     0009                     __end_of__stringtab:
   197     0009                     STR_1:
   198     0009  3447               	retlw	71	;'G'
   199     000A  344F               	retlw	79	;'O'
   200     000B  344A               	retlw	74	;'J'
   201     000C  344F               	retlw	79	;'O'
   202     000D  3420               	retlw	32	;' '
   203     000E  3420               	retlw	32	;' '
   204     000F  3420               	retlw	32	;' '
   205     0010  3420               	retlw	32	;' '
   206     0011  3420               	retlw	32	;' '
   207     0012  3400               	retlw	0
   208     0013                     STR_2:
   209     0013  3453               	retlw	83	;'S'
   210     0014  3441               	retlw	65	;'A'
   211     0015  3454               	retlw	84	;'T'
   212     0016  344F               	retlw	79	;'O'
   213     0017  3452               	retlw	82	;'R'
   214     0018  3455               	retlw	85	;'U'
   215     0019  3420               	retlw	32	;' '
   216     001A  3420               	retlw	32	;' '
   217     001B  3420               	retlw	32	;' '
   218     001C  3400               	retlw	0
   219     001D                     STR_3:
   220     001D  3449               	retlw	73	;'I'
   221     001E  3454               	retlw	84	;'T'
   222     001F  3441               	retlw	65	;'A'
   223     0020  3444               	retlw	68	;'D'
   224     0021  344F               	retlw	79	;'O'
   225     0022  3452               	retlw	82	;'R'
   226     0023  3449               	retlw	73	;'I'
   227     0024  3420               	retlw	32	;' '
   228     0025  3420               	retlw	32	;' '
   229     0026  3400               	retlw	0
   230     0027                     STR_4:
   231     0027  3454               	retlw	84	;'T'
   232     0028  3441               	retlw	65	;'A'
   233     0029  344B               	retlw	75	;'K'
   234     002A  3445               	retlw	69	;'E'
   235     002B  344D               	retlw	77	;'M'
   236     002C  3449               	retlw	73	;'I'
   237     002D  3443               	retlw	67	;'C'
   238     002E  3448               	retlw	72	;'H'
   239     002F  3449               	retlw	73	;'I'
   240     0030  3400               	retlw	0
   241                           
   242                           	psect	cinit
   243     07FC                     start_initialization:	
   244                           ; #config settings
   245                           
   246     07FC                     __initialization:
   247     07FC                     end_of_initialization:	
   248                           ;End of C runtime variable initialization code
   249                           
   250     07FC                     __end_of__initialization:
   251     07FC  0183               	clrf	3
   252     07FD  120A  118A  2F94   	ljmp	_main	;jump to C main() function
   253                           
   254                           	psect	cstackCOMMON
   255     0070                     __pcstackCOMMON:
   256     0070                     ?_Lcd_Port:
   257     0070                     ??_Lcd_Port:	
   258                           ; 1 bytes @ 0x0
   259                           
   260     0070                     ?_Lcd_Cmd:	
   261                           ; 1 bytes @ 0x0
   262                           
   263     0070                     ?_Lcd_Init:	
   264                           ; 1 bytes @ 0x0
   265                           
   266     0070                     ?_Lcd_Write_Char:	
   267                           ; 1 bytes @ 0x0
   268                           
   269     0070                     ?_Lcd_Write_String:	
   270                           ; 1 bytes @ 0x0
   271                           
   272     0070                     ?_main:	
   273                           ; 1 bytes @ 0x0
   274                           
   275     0070                     Lcd_Port@a:	
   276                           ; 1 bytes @ 0x0
   277                           
   278                           
   279                           ; 1 bytes @ 0x0
   280     0070                     	ds	1
   281     0071                     ??_Lcd_Cmd:
   282     0071                     ??_Lcd_Write_Char:	
   283                           ; 1 bytes @ 0x1
   284                           
   285                           
   286                           ; 1 bytes @ 0x1
   287     0071                     	ds	1
   288     0072                     Lcd_Write_Char@temp:
   289                           
   290                           ; 1 bytes @ 0x2
   291     0072                     	ds	1
   292     0073                     Lcd_Cmd@a:
   293     0073                     Lcd_Write_Char@y:	
   294                           ; 1 bytes @ 0x3
   295                           
   296                           
   297                           ; 1 bytes @ 0x3
   298     0073                     	ds	1
   299     0074                     ?_Lcd_Set_Cursor:
   300     0074                     ??_Lcd_Init:	
   301                           ; 1 bytes @ 0x4
   302                           
   303     0074                     Lcd_Set_Cursor@b:	
   304                           ; 1 bytes @ 0x4
   305                           
   306     0074                     Lcd_Write_Char@a:	
   307                           ; 1 bytes @ 0x4
   308                           
   309                           
   310                           ; 1 bytes @ 0x4
   311     0074                     	ds	1
   312     0075                     ??_Lcd_Set_Cursor:
   313     0075                     ??_Lcd_Write_String:	
   314                           ; 1 bytes @ 0x5
   315                           
   316     0075                     Lcd_Write_String@i:	
   317                           ; 1 bytes @ 0x5
   318                           
   319                           
   320                           ; 2 bytes @ 0x5
   321     0075                     	ds	1
   322     0076                     Lcd_Set_Cursor@a:
   323                           
   324                           ; 1 bytes @ 0x6
   325     0076                     	ds	1
   326     0077                     Lcd_Set_Cursor@z:
   327     0077                     Lcd_Write_String@a:	
   328                           ; 1 bytes @ 0x7
   329                           
   330                           
   331                           ; 1 bytes @ 0x7
   332     0077                     	ds	1
   333     0078                     Lcd_Set_Cursor@y:
   334                           
   335                           ; 1 bytes @ 0x8
   336     0078                     	ds	1
   337     0079                     Lcd_Set_Cursor@temp:
   338                           
   339                           ; 1 bytes @ 0x9
   340     0079                     	ds	1
   341     007A                     ??_main:
   342     007A                     main@prevStateRB0:	
   343                           ; 1 bytes @ 0xA
   344                           
   345                           
   346                           ; 1 bytes @ 0xA
   347     007A                     	ds	1
   348     007B                     main@prevStateRB1:
   349                           
   350                           ; 1 bytes @ 0xB
   351     007B                     	ds	1
   352                           
   353                           	psect	maintext
   354     0794                     __pmaintext:	
   355 ;;
   356 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   357 ;;
   358 ;; *************** function _main *****************
   359 ;; Defined at:
   360 ;;		line 20 in file "code1.c"
   361 ;; Parameters:    Size  Location     Type
   362 ;;		None
   363 ;; Auto vars:     Size  Location     Type
   364 ;;  prevStateRB1    1   11[COMMON] unsigned char 
   365 ;;  prevStateRB0    1   10[COMMON] unsigned char 
   366 ;; Return value:  Size  Location     Type
   367 ;;                  1    wreg      void 
   368 ;; Registers used:
   369 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   370 ;; Tracked objects:
   371 ;;		On entry : B00/0
   372 ;;		On exit  : 0/0
   373 ;;		Unchanged: 0/0
   374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   375 ;;      Params:         0       0       0       0       0
   376 ;;      Locals:         2       0       0       0       0
   377 ;;      Temps:          0       0       0       0       0
   378 ;;      Totals:         2       0       0       0       0
   379 ;;Total ram usage:        2 bytes
   380 ;; Hardware stack levels required when called: 3
   381 ;; This function calls:
   382 ;;		_Lcd_Init
   383 ;;		_Lcd_Set_Cursor
   384 ;;		_Lcd_Write_String
   385 ;; This function is called by:
   386 ;;		Startup code after reset
   387 ;; This function uses a non-reentrant model
   388 ;;
   389                           
   390     0794                     _main:	
   391                           ;psect for function _main
   392                           
   393     0794                     l813:	
   394                           ;incstack = 0
   395                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   396                           
   397                           
   398                           ;code1.c: 21:     TRISB = 0x03;
   399     0794  3003               	movlw	3
   400     0795  1683               	bsf	3,5	;RP0=1, select bank1
   401     0796  1303               	bcf	3,6	;RP1=0, select bank1
   402     0797  0086               	movwf	6	;volatile
   403     0798                     l815:
   404                           
   405                           ;code1.c: 22:     TRISD = 0x00;
   406     0798  0188               	clrf	8	;volatile
   407     0799                     l817:
   408                           
   409                           ;code1.c: 23:     Lcd_Init();
   410     0799  120A  118A  2736  120A  118A  	fcall	_Lcd_Init
   411     079E                     l819:
   412                           
   413                           ;code1.c: 25:     unsigned char prevStateRB0 = PORTBbits.RB0;
   414     079E  3000               	movlw	0
   415     079F  1283               	bcf	3,5	;RP0=0, select bank0
   416     07A0  1303               	bcf	3,6	;RP1=0, select bank0
   417     07A1  1806               	btfsc	6,0	;volatile
   418     07A2  3001               	movlw	1
   419     07A3  00FA               	movwf	main@prevStateRB0
   420     07A4                     l821:
   421                           
   422                           ;code1.c: 26:     unsigned char prevStateRB1 = PORTBbits.RB1;
   423     07A4  3000               	movlw	0
   424     07A5  1886               	btfsc	6,1	;volatile
   425     07A6  3001               	movlw	1
   426     07A7  00FB               	movwf	main@prevStateRB1
   427     07A8                     l823:
   428                           
   429                           ;code1.c: 30:         if(PORTBbits.RB0 != prevStateRB0) {
   430     07A8  1283               	bcf	3,5	;RP0=0, select bank0
   431     07A9  1303               	bcf	3,6	;RP1=0, select bank0
   432     07AA  0806               	movf	6,w	;volatile
   433     07AB  3901               	andlw	1
   434     07AC  067A               	xorwf	main@prevStateRB0,w
   435     07AD  1903               	skipnz
   436     07AE  2FB0               	goto	u201
   437     07AF  2FB1               	goto	u200
   438     07B0                     u201:
   439     07B0  2FD0               	goto	l835
   440     07B1                     u200:
   441     07B1                     l825:
   442                           
   443                           ;code1.c: 31:             prevStateRB0 = PORTBbits.RB0;
   444     07B1  3000               	movlw	0
   445     07B2  1806               	btfsc	6,0	;volatile
   446     07B3  3001               	movlw	1
   447     07B4  00FA               	movwf	main@prevStateRB0
   448     07B5                     l827:
   449                           
   450                           ;code1.c: 32:             Lcd_Set_Cursor(1,1);
   451     07B5  01F4               	clrf	Lcd_Set_Cursor@b
   452     07B6  0AF4               	incf	Lcd_Set_Cursor@b,f
   453     07B7  3001               	movlw	1
   454     07B8  120A  118A  26F0  120A  118A  	fcall	_Lcd_Set_Cursor
   455     07BD                     l829:
   456                           
   457                           ;code1.c: 33:             if(PORTBbits.RB0 == 0) {
   458     07BD  1283               	bcf	3,5	;RP0=0, select bank0
   459     07BE  1303               	bcf	3,6	;RP1=0, select bank0
   460     07BF  1806               	btfsc	6,0	;volatile
   461     07C0  2FC2               	goto	u211
   462     07C1  2FC3               	goto	u210
   463     07C2                     u211:
   464     07C2  2FCA               	goto	l833
   465     07C3                     u210:
   466     07C3                     l831:
   467                           
   468                           ;code1.c: 34:                 Lcd_Write_String("GOJO     ");
   469     07C3  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   470     07C4  120A  118A  2696  120A  118A  	fcall	_Lcd_Write_String
   471                           
   472                           ;code1.c: 35:             }
   473     07C9  2FD0               	goto	l835
   474     07CA                     l833:
   475                           
   476                           ;code1.c: 37:             {;code1.c: 38:                 Lcd_Write_String("SATORU   ");
   477     07CA  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   478     07CB  120A  118A  2696  120A  118A  	fcall	_Lcd_Write_String
   479     07D0                     l835:
   480                           
   481                           ;code1.c: 43:         if(PORTBbits.RB1 != prevStateRB1) {
   482     07D0  1283               	bcf	3,5	;RP0=0, select bank0
   483     07D1  1303               	bcf	3,6	;RP1=0, select bank0
   484     07D2  0C06               	rrf	6,w	;volatile
   485     07D3  3901               	andlw	1
   486     07D4  067B               	xorwf	main@prevStateRB1,w
   487     07D5  1903               	skipnz
   488     07D6  2FD8               	goto	u221
   489     07D7  2FD9               	goto	u220
   490     07D8                     u221:
   491     07D8  2FA8               	goto	l823
   492     07D9                     u220:
   493     07D9                     l837:
   494                           
   495                           ;code1.c: 44:             prevStateRB1 = PORTBbits.RB1;
   496     07D9  3000               	movlw	0
   497     07DA  1886               	btfsc	6,1	;volatile
   498     07DB  3001               	movlw	1
   499     07DC  00FB               	movwf	main@prevStateRB1
   500     07DD                     l839:
   501                           
   502                           ;code1.c: 45:             Lcd_Set_Cursor(2,1);
   503     07DD  01F4               	clrf	Lcd_Set_Cursor@b
   504     07DE  0AF4               	incf	Lcd_Set_Cursor@b,f
   505     07DF  3002               	movlw	2
   506     07E0  120A  118A  26F0  120A  118A  	fcall	_Lcd_Set_Cursor
   507     07E5                     l841:
   508                           
   509                           ;code1.c: 46:             if(PORTBbits.RB1 == 0) {
   510     07E5  1283               	bcf	3,5	;RP0=0, select bank0
   511     07E6  1303               	bcf	3,6	;RP1=0, select bank0
   512     07E7  1886               	btfsc	6,1	;volatile
   513     07E8  2FEA               	goto	u231
   514     07E9  2FEB               	goto	u230
   515     07EA                     u231:
   516     07EA  2FF2               	goto	l845
   517     07EB                     u230:
   518     07EB                     l843:
   519                           
   520                           ;code1.c: 47:                 Lcd_Write_String("ITADORI  ");
   521     07EB  3015               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   522     07EC  120A  118A  2696  120A  118A  	fcall	_Lcd_Write_String
   523                           
   524                           ;code1.c: 48:             }
   525     07F1  2FA8               	goto	l823
   526     07F2                     l845:
   527                           
   528                           ;code1.c: 50:             {;code1.c: 51:                 Lcd_Write_String("TAKEMICHI");
   529     07F2  301F               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   530     07F3  120A  118A  2696  120A  118A  	fcall	_Lcd_Write_String
   531     07F8  2FA8               	goto	l823
   532     07F9  120A  118A  2800   	ljmp	start
   533     07FC                     __end_of_main:
   534                           
   535                           	psect	text1
   536     0696                     __ptext1:	
   537 ;; *************** function _Lcd_Write_String *****************
   538 ;; Defined at:
   539 ;;		line 97 in file "./Lcd.h"
   540 ;; Parameters:    Size  Location     Type
   541 ;;  a               1    wreg     PTR unsigned char 
   542 ;;		 -> STR_4(10), STR_3(10), STR_2(10), STR_1(10), 
   543 ;; Auto vars:     Size  Location     Type
   544 ;;  a               1    7[COMMON] PTR unsigned char 
   545 ;;		 -> STR_4(10), STR_3(10), STR_2(10), STR_1(10), 
   546 ;;  i               2    5[COMMON] int 
   547 ;; Return value:  Size  Location     Type
   548 ;;                  1    wreg      void 
   549 ;; Registers used:
   550 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   551 ;; Tracked objects:
   552 ;;		On entry : 0/0
   553 ;;		On exit  : 0/0
   554 ;;		Unchanged: 0/0
   555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   556 ;;      Params:         0       0       0       0       0
   557 ;;      Locals:         3       0       0       0       0
   558 ;;      Temps:          0       0       0       0       0
   559 ;;      Totals:         3       0       0       0       0
   560 ;;Total ram usage:        3 bytes
   561 ;; Hardware stack levels used: 1
   562 ;; Hardware stack levels required when called: 2
   563 ;; This function calls:
   564 ;;		_Lcd_Write_Char
   565 ;; This function is called by:
   566 ;;		_main
   567 ;; This function uses a non-reentrant model
   568 ;;
   569                           
   570     0696                     _Lcd_Write_String:	
   571                           ;psect for function _Lcd_Write_String
   572                           
   573                           
   574                           ;incstack = 0
   575                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   576                           ;Lcd_Write_String@a stored from wreg
   577     0696  00F7               	movwf	Lcd_Write_String@a
   578     0697                     l805:
   579                           
   580                           ;./Lcd.h: 97: void Lcd_Write_String(char *a);./Lcd.h: 98: {;./Lcd.h: 99:  int i;;./Lcd.h
      +                          : 100:  for(i=0;a[i]!='\0';i++)
   581     0697  01F5               	clrf	Lcd_Write_String@i
   582     0698  01F6               	clrf	Lcd_Write_String@i+1
   583     0699  2EAD               	goto	l811
   584     069A                     l807:
   585                           
   586                           ;./Lcd.h: 101:     Lcd_Write_Char(a[i]);
   587     069A  0875               	movf	Lcd_Write_String@i,w
   588     069B  0777               	addwf	Lcd_Write_String@a,w
   589     069C  0084               	movwf	4
   590     069D  120A  118A  2003  120A  118A  	fcall	stringdir
   591     06A2  120A  118A  26BB  120A  118A  	fcall	_Lcd_Write_Char
   592     06A7                     l809:
   593     06A7  3001               	movlw	1
   594     06A8  07F5               	addwf	Lcd_Write_String@i,f
   595     06A9  1803               	skipnc
   596     06AA  0AF6               	incf	Lcd_Write_String@i+1,f
   597     06AB  3000               	movlw	0
   598     06AC  07F6               	addwf	Lcd_Write_String@i+1,f
   599     06AD                     l811:
   600     06AD  0875               	movf	Lcd_Write_String@i,w
   601     06AE  0777               	addwf	Lcd_Write_String@a,w
   602     06AF  0084               	movwf	4
   603     06B0  120A  118A  2003  120A  118A  	fcall	stringdir
   604     06B5  3A00               	xorlw	0
   605     06B6  1D03               	skipz
   606     06B7  2EB9               	goto	u191
   607     06B8  2EBA               	goto	u190
   608     06B9                     u191:
   609     06B9  2E9A               	goto	l807
   610     06BA                     u190:
   611     06BA                     l55:
   612     06BA  0008               	return
   613     06BB                     __end_of_Lcd_Write_String:
   614                           
   615                           	psect	text2
   616     06BB                     __ptext2:	
   617 ;; *************** function _Lcd_Write_Char *****************
   618 ;; Defined at:
   619 ;;		line 81 in file "./Lcd.h"
   620 ;; Parameters:    Size  Location     Type
   621 ;;  a               1    wreg     unsigned char 
   622 ;; Auto vars:     Size  Location     Type
   623 ;;  a               1    4[COMMON] unsigned char 
   624 ;;  y               1    3[COMMON] unsigned char 
   625 ;;  temp            1    2[COMMON] unsigned char 
   626 ;; Return value:  Size  Location     Type
   627 ;;                  1    wreg      void 
   628 ;; Registers used:
   629 ;;		wreg, status,2, status,0, pclath, cstack
   630 ;; Tracked objects:
   631 ;;		On entry : 0/0
   632 ;;		On exit  : 0/0
   633 ;;		Unchanged: 0/0
   634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   635 ;;      Params:         0       0       0       0       0
   636 ;;      Locals:         3       0       0       0       0
   637 ;;      Temps:          1       0       0       0       0
   638 ;;      Totals:         4       0       0       0       0
   639 ;;Total ram usage:        4 bytes
   640 ;; Hardware stack levels used: 1
   641 ;; Hardware stack levels required when called: 1
   642 ;; This function calls:
   643 ;;		_Lcd_Port
   644 ;; This function is called by:
   645 ;;		_Lcd_Write_String
   646 ;; This function uses a non-reentrant model
   647 ;;
   648                           
   649     06BB                     _Lcd_Write_Char:	
   650                           ;psect for function _Lcd_Write_Char
   651                           
   652                           
   653                           ;incstack = 0
   654                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   655                           ;Lcd_Write_Char@a stored from wreg
   656     06BB  00F4               	movwf	Lcd_Write_Char@a
   657     06BC                     l687:
   658                           
   659                           ;./Lcd.h: 81: void Lcd_Write_Char(char a);./Lcd.h: 82: {;./Lcd.h: 83:    char temp,y;;./
      +                          Lcd.h: 84:    temp = a&0x0F;
   660     06BC  0874               	movf	Lcd_Write_Char@a,w
   661     06BD  390F               	andlw	15
   662     06BE  00F2               	movwf	Lcd_Write_Char@temp
   663                           
   664                           ;./Lcd.h: 85:    y = a&0xF0;
   665     06BF  0874               	movf	Lcd_Write_Char@a,w
   666     06C0  39F0               	andlw	240
   667     06C1  00F3               	movwf	Lcd_Write_Char@y
   668     06C2                     l689:
   669                           
   670                           ;./Lcd.h: 86:    RD2 = 1;
   671     06C2  1283               	bcf	3,5	;RP0=0, select bank0
   672     06C3  1303               	bcf	3,6	;RP1=0, select bank0
   673     06C4  1508               	bsf	8,2	;volatile
   674     06C5                     l691:
   675                           
   676                           ;./Lcd.h: 87:    Lcd_Port(y>>4);
   677     06C5  0873               	movf	Lcd_Write_Char@y,w
   678     06C6  00F1               	movwf	??_Lcd_Write_Char
   679     06C7  3004               	movlw	4
   680     06C8                     u55:
   681     06C8  1003               	clrc
   682     06C9  0CF1               	rrf	??_Lcd_Write_Char,f
   683     06CA  3EFF               	addlw	-1
   684     06CB  1D03               	skipz
   685     06CC  2EC8               	goto	u55
   686     06CD  0871               	movf	??_Lcd_Write_Char,w
   687     06CE  120A  118A  2674  120A  118A  	fcall	_Lcd_Port
   688     06D3                     l693:
   689                           
   690                           ;./Lcd.h: 88:    RD3 = 1;
   691     06D3  1283               	bcf	3,5	;RP0=0, select bank0
   692     06D4  1303               	bcf	3,6	;RP1=0, select bank0
   693     06D5  1588               	bsf	8,3	;volatile
   694     06D6                     l695:
   695                           
   696                           ;./Lcd.h: 89:    _delay((unsigned long)((40)*(20000000/4000000.0)));
   697     06D6  3042               	movlw	66
   698     06D7  00F1               	movwf	??_Lcd_Write_Char
   699     06D8                     u247:
   700     06D8  0BF1               	decfsz	??_Lcd_Write_Char,f
   701     06D9  2ED8               	goto	u247
   702     06DA  0000               	nop
   703     06DB                     l697:
   704                           
   705                           ;./Lcd.h: 90:    RD3 = 0;
   706     06DB  1283               	bcf	3,5	;RP0=0, select bank0
   707     06DC  1303               	bcf	3,6	;RP1=0, select bank0
   708     06DD  1188               	bcf	8,3	;volatile
   709     06DE                     l699:
   710                           
   711                           ;./Lcd.h: 91:    Lcd_Port(temp);
   712     06DE  0872               	movf	Lcd_Write_Char@temp,w
   713     06DF  120A  118A  2674  120A  118A  	fcall	_Lcd_Port
   714     06E4                     l701:
   715                           
   716                           ;./Lcd.h: 92:    RD3 = 1;
   717     06E4  1283               	bcf	3,5	;RP0=0, select bank0
   718     06E5  1303               	bcf	3,6	;RP1=0, select bank0
   719     06E6  1588               	bsf	8,3	;volatile
   720     06E7                     l703:
   721                           
   722                           ;./Lcd.h: 93:    _delay((unsigned long)((40)*(20000000/4000000.0)));
   723     06E7  3042               	movlw	66
   724     06E8  00F1               	movwf	??_Lcd_Write_Char
   725     06E9                     u257:
   726     06E9  0BF1               	decfsz	??_Lcd_Write_Char,f
   727     06EA  2EE9               	goto	u257
   728     06EB  0000               	nop
   729     06EC                     l705:
   730                           
   731                           ;./Lcd.h: 94:    RD3 = 0;
   732     06EC  1283               	bcf	3,5	;RP0=0, select bank0
   733     06ED  1303               	bcf	3,6	;RP1=0, select bank0
   734     06EE  1188               	bcf	8,3	;volatile
   735     06EF                     l49:
   736     06EF  0008               	return
   737     06F0                     __end_of_Lcd_Write_Char:
   738                           
   739                           	psect	text3
   740     06F0                     __ptext3:	
   741 ;; *************** function _Lcd_Set_Cursor *****************
   742 ;; Defined at:
   743 ;;		line 41 in file "./Lcd.h"
   744 ;; Parameters:    Size  Location     Type
   745 ;;  a               1    wreg     unsigned char 
   746 ;;  b               1    4[COMMON] unsigned char 
   747 ;; Auto vars:     Size  Location     Type
   748 ;;  a               1    6[COMMON] unsigned char 
   749 ;;  temp            1    9[COMMON] unsigned char 
   750 ;;  y               1    8[COMMON] unsigned char 
   751 ;;  z               1    7[COMMON] unsigned char 
   752 ;; Return value:  Size  Location     Type
   753 ;;                  1    wreg      void 
   754 ;; Registers used:
   755 ;;		wreg, status,2, status,0, pclath, cstack
   756 ;; Tracked objects:
   757 ;;		On entry : 0/0
   758 ;;		On exit  : 0/0
   759 ;;		Unchanged: 0/0
   760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   761 ;;      Params:         1       0       0       0       0
   762 ;;      Locals:         4       0       0       0       0
   763 ;;      Temps:          1       0       0       0       0
   764 ;;      Totals:         6       0       0       0       0
   765 ;;Total ram usage:        6 bytes
   766 ;; Hardware stack levels used: 1
   767 ;; Hardware stack levels required when called: 2
   768 ;; This function calls:
   769 ;;		_Lcd_Cmd
   770 ;; This function is called by:
   771 ;;		_main
   772 ;; This function uses a non-reentrant model
   773 ;;
   774                           
   775     06F0                     _Lcd_Set_Cursor:	
   776                           ;psect for function _Lcd_Set_Cursor
   777                           
   778                           
   779                           ;incstack = 0
   780                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   781                           ;Lcd_Set_Cursor@a stored from wreg
   782     06F0  00F6               	movwf	Lcd_Set_Cursor@a
   783     06F1                     l785:
   784                           
   785                           ;./Lcd.h: 41: void Lcd_Set_Cursor(char a, char b);./Lcd.h: 42: {;./Lcd.h: 43:  char temp
      +                          ,z,y;;./Lcd.h: 44:  if(a == 1)
   786     06F1  0376               	decf	Lcd_Set_Cursor@a,w
   787     06F2  1D03               	btfss	3,2
   788     06F3  2EF5               	goto	u151
   789     06F4  2EF6               	goto	u150
   790     06F5                     u151:
   791     06F5  2F13               	goto	l795
   792     06F6                     u150:
   793     06F6                     l787:
   794                           
   795                           ;./Lcd.h: 45:  {;./Lcd.h: 46:    temp = 0x80 + b - 1;
   796     06F6  0874               	movf	Lcd_Set_Cursor@b,w
   797     06F7  3E7F               	addlw	127
   798     06F8  00F9               	movwf	Lcd_Set_Cursor@temp
   799                           
   800                           ;./Lcd.h: 47:   z = temp>>4;
   801     06F9  0879               	movf	Lcd_Set_Cursor@temp,w
   802     06FA  00F5               	movwf	??_Lcd_Set_Cursor
   803     06FB  3004               	movlw	4
   804     06FC                     u165:
   805     06FC  1003               	clrc
   806     06FD  0CF5               	rrf	??_Lcd_Set_Cursor,f
   807     06FE  3EFF               	addlw	-1
   808     06FF  1D03               	skipz
   809     0700  2EFC               	goto	u165
   810     0701  0875               	movf	??_Lcd_Set_Cursor,w
   811     0702  00F7               	movwf	Lcd_Set_Cursor@z
   812     0703                     l789:
   813                           
   814                           ;./Lcd.h: 48:   y = temp & 0x0F;
   815     0703  0879               	movf	Lcd_Set_Cursor@temp,w
   816     0704  390F               	andlw	15
   817     0705  00F8               	movwf	Lcd_Set_Cursor@y
   818     0706                     l791:
   819                           
   820                           ;./Lcd.h: 49:   Lcd_Cmd(z);
   821     0706  0877               	movf	Lcd_Set_Cursor@z,w
   822     0707  120A  118A  265A  120A  118A  	fcall	_Lcd_Cmd
   823     070C                     l793:
   824                           
   825                           ;./Lcd.h: 50:   Lcd_Cmd(y);
   826     070C  0878               	movf	Lcd_Set_Cursor@y,w
   827     070D  120A  118A  265A  120A  118A  	fcall	_Lcd_Cmd
   828                           
   829                           ;./Lcd.h: 51:  }
   830     0712  2F35               	goto	l43
   831     0713                     l795:
   832     0713  3002               	movlw	2
   833     0714  0676               	xorwf	Lcd_Set_Cursor@a,w
   834     0715  1D03               	btfss	3,2
   835     0716  2F18               	goto	u171
   836     0717  2F19               	goto	u170
   837     0718                     u171:
   838     0718  2F35               	goto	l43
   839     0719                     u170:
   840     0719                     l797:
   841                           
   842                           ;./Lcd.h: 53:  {;./Lcd.h: 54:   temp = 0xC0 + b - 1;
   843     0719  0874               	movf	Lcd_Set_Cursor@b,w
   844     071A  3EBF               	addlw	191
   845     071B  00F9               	movwf	Lcd_Set_Cursor@temp
   846                           
   847                           ;./Lcd.h: 55:   z = temp>>4;
   848     071C  0879               	movf	Lcd_Set_Cursor@temp,w
   849     071D  00F5               	movwf	??_Lcd_Set_Cursor
   850     071E  3004               	movlw	4
   851     071F                     u185:
   852     071F  1003               	clrc
   853     0720  0CF5               	rrf	??_Lcd_Set_Cursor,f
   854     0721  3EFF               	addlw	-1
   855     0722  1D03               	skipz
   856     0723  2F1F               	goto	u185
   857     0724  0875               	movf	??_Lcd_Set_Cursor,w
   858     0725  00F7               	movwf	Lcd_Set_Cursor@z
   859     0726                     l799:
   860                           
   861                           ;./Lcd.h: 56:   y = temp & 0x0F;
   862     0726  0879               	movf	Lcd_Set_Cursor@temp,w
   863     0727  390F               	andlw	15
   864     0728  00F8               	movwf	Lcd_Set_Cursor@y
   865     0729                     l801:
   866                           
   867                           ;./Lcd.h: 57:   Lcd_Cmd(z);
   868     0729  0877               	movf	Lcd_Set_Cursor@z,w
   869     072A  120A  118A  265A  120A  118A  	fcall	_Lcd_Cmd
   870     072F                     l803:
   871                           
   872                           ;./Lcd.h: 58:   Lcd_Cmd(y);
   873     072F  0878               	movf	Lcd_Set_Cursor@y,w
   874     0730  120A  118A  265A  120A  118A  	fcall	_Lcd_Cmd
   875     0735                     l43:
   876     0735  0008               	return
   877     0736                     __end_of_Lcd_Set_Cursor:
   878                           
   879                           	psect	text4
   880     0736                     __ptext4:	
   881 ;; *************** function _Lcd_Init *****************
   882 ;; Defined at:
   883 ;;		line 62 in file "./Lcd.h"
   884 ;; Parameters:    Size  Location     Type
   885 ;;		None
   886 ;; Auto vars:     Size  Location     Type
   887 ;;		None
   888 ;; Return value:  Size  Location     Type
   889 ;;                  1    wreg      void 
   890 ;; Registers used:
   891 ;;		wreg, status,2, status,0, pclath, cstack
   892 ;; Tracked objects:
   893 ;;		On entry : 0/0
   894 ;;		On exit  : 0/0
   895 ;;		Unchanged: 0/0
   896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   897 ;;      Params:         0       0       0       0       0
   898 ;;      Locals:         0       0       0       0       0
   899 ;;      Temps:          2       0       0       0       0
   900 ;;      Totals:         2       0       0       0       0
   901 ;;Total ram usage:        2 bytes
   902 ;; Hardware stack levels used: 1
   903 ;; Hardware stack levels required when called: 2
   904 ;; This function calls:
   905 ;;		_Lcd_Cmd
   906 ;;		_Lcd_Port
   907 ;; This function is called by:
   908 ;;		_main
   909 ;; This function uses a non-reentrant model
   910 ;;
   911                           
   912     0736                     _Lcd_Init:	
   913                           ;psect for function _Lcd_Init
   914                           
   915     0736                     l727:	
   916                           ;incstack = 0
   917                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
   918                           
   919                           
   920                           ;./Lcd.h: 64:   Lcd_Port(0x00);
   921     0736  3000               	movlw	0
   922     0737  120A  118A  2674  120A  118A  	fcall	_Lcd_Port
   923     073C                     l729:
   924                           
   925                           ;./Lcd.h: 65:    _delay((unsigned long)((20)*(20000000/4000.0)));
   926     073C  3082               	movlw	130
   927     073D  00F5               	movwf	??_Lcd_Init+1
   928     073E  30DD               	movlw	221
   929     073F  00F4               	movwf	??_Lcd_Init
   930     0740                     u267:
   931     0740  0BF4               	decfsz	??_Lcd_Init,f
   932     0741  2F40               	goto	u267
   933     0742  0BF5               	decfsz	??_Lcd_Init+1,f
   934     0743  2F40               	goto	u267
   935     0744  2F45               	nop2
   936     0745                     l731:
   937                           
   938                           ;./Lcd.h: 66:   Lcd_Cmd(0x03);
   939     0745  3003               	movlw	3
   940     0746  120A  118A  265A  120A  118A  	fcall	_Lcd_Cmd
   941                           
   942                           ;./Lcd.h: 67:  _delay((unsigned long)((5)*(20000000/4000.0)));
   943     074B  3021               	movlw	33
   944     074C  00F5               	movwf	??_Lcd_Init+1
   945     074D  3076               	movlw	118
   946     074E  00F4               	movwf	??_Lcd_Init
   947     074F                     u277:
   948     074F  0BF4               	decfsz	??_Lcd_Init,f
   949     0750  2F4F               	goto	u277
   950     0751  0BF5               	decfsz	??_Lcd_Init+1,f
   951     0752  2F4F               	goto	u277
   952     0753  0000               	nop
   953     0754                     l733:
   954                           
   955                           ;./Lcd.h: 68:   Lcd_Cmd(0x03);
   956     0754  3003               	movlw	3
   957     0755  120A  118A  265A  120A  118A  	fcall	_Lcd_Cmd
   958     075A                     l735:
   959                           
   960                           ;./Lcd.h: 69:  _delay((unsigned long)((11)*(20000000/4000.0)));
   961     075A  3048               	movlw	72
   962     075B  00F5               	movwf	??_Lcd_Init+1
   963     075C  306C               	movlw	108
   964     075D  00F4               	movwf	??_Lcd_Init
   965     075E                     u287:
   966     075E  0BF4               	decfsz	??_Lcd_Init,f
   967     075F  2F5E               	goto	u287
   968     0760  0BF5               	decfsz	??_Lcd_Init+1,f
   969     0761  2F5E               	goto	u287
   970     0762  0000               	nop
   971                           
   972                           ;./Lcd.h: 70:   Lcd_Cmd(0x03);
   973     0763  3003               	movlw	3
   974     0764  120A  118A  265A  120A  118A  	fcall	_Lcd_Cmd
   975                           
   976                           ;./Lcd.h: 72:   Lcd_Cmd(0x02);
   977     0769  3002               	movlw	2
   978     076A  120A  118A  265A  120A  118A  	fcall	_Lcd_Cmd
   979                           
   980                           ;./Lcd.h: 73:   Lcd_Cmd(0x02);
   981     076F  3002               	movlw	2
   982     0770  120A  118A  265A  120A  118A  	fcall	_Lcd_Cmd
   983                           
   984                           ;./Lcd.h: 74:   Lcd_Cmd(0x08);
   985     0775  3008               	movlw	8
   986     0776  120A  118A  265A  120A  118A  	fcall	_Lcd_Cmd
   987                           
   988                           ;./Lcd.h: 75:   Lcd_Cmd(0x00);
   989     077B  3000               	movlw	0
   990     077C  120A  118A  265A  120A  118A  	fcall	_Lcd_Cmd
   991                           
   992                           ;./Lcd.h: 76:   Lcd_Cmd(0x0C);
   993     0781  300C               	movlw	12
   994     0782  120A  118A  265A  120A  118A  	fcall	_Lcd_Cmd
   995                           
   996                           ;./Lcd.h: 77:   Lcd_Cmd(0x00);
   997     0787  3000               	movlw	0
   998     0788  120A  118A  265A  120A  118A  	fcall	_Lcd_Cmd
   999                           
  1000                           ;./Lcd.h: 78:   Lcd_Cmd(0x06);
  1001     078D  3006               	movlw	6
  1002     078E  120A  118A  265A  120A  118A  	fcall	_Lcd_Cmd
  1003     0793                     l46:
  1004     0793  0008               	return
  1005     0794                     __end_of_Lcd_Init:
  1006                           
  1007                           	psect	text5
  1008     065A                     __ptext5:	
  1009 ;; *************** function _Lcd_Cmd *****************
  1010 ;; Defined at:
  1011 ;;		line 26 in file "./Lcd.h"
  1012 ;; Parameters:    Size  Location     Type
  1013 ;;  a               1    wreg     unsigned char 
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;  a               1    3[COMMON] unsigned char 
  1016 ;; Return value:  Size  Location     Type
  1017 ;;                  1    wreg      void 
  1018 ;; Registers used:
  1019 ;;		wreg, status,2, status,0, pclath, cstack
  1020 ;; Tracked objects:
  1021 ;;		On entry : 0/0
  1022 ;;		On exit  : 0/0
  1023 ;;		Unchanged: 0/0
  1024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1025 ;;      Params:         0       0       0       0       0
  1026 ;;      Locals:         1       0       0       0       0
  1027 ;;      Temps:          2       0       0       0       0
  1028 ;;      Totals:         3       0       0       0       0
  1029 ;;Total ram usage:        3 bytes
  1030 ;; Hardware stack levels used: 1
  1031 ;; Hardware stack levels required when called: 1
  1032 ;; This function calls:
  1033 ;;		_Lcd_Port
  1034 ;; This function is called by:
  1035 ;;		_Lcd_Set_Cursor
  1036 ;;		_Lcd_Init
  1037 ;;		_Lcd_Clear
  1038 ;;		_Lcd_Shift_Right
  1039 ;;		_Lcd_Shift_Left
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043     065A                     _Lcd_Cmd:	
  1044                           ;psect for function _Lcd_Cmd
  1045                           
  1046                           
  1047                           ;incstack = 0
  1048                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1049                           ;Lcd_Cmd@a stored from wreg
  1050     065A  00F3               	movwf	Lcd_Cmd@a
  1051     065B                     l677:
  1052                           
  1053                           ;./Lcd.h: 26: void Lcd_Cmd(char a);./Lcd.h: 27: {;./Lcd.h: 28:  RD2 = 0;
  1054     065B  1283               	bcf	3,5	;RP0=0, select bank0
  1055     065C  1303               	bcf	3,6	;RP1=0, select bank0
  1056     065D  1108               	bcf	8,2	;volatile
  1057     065E                     l679:
  1058                           
  1059                           ;./Lcd.h: 29:  Lcd_Port(a);
  1060     065E  0873               	movf	Lcd_Cmd@a,w
  1061     065F  120A  118A  2674  120A  118A  	fcall	_Lcd_Port
  1062     0664                     l681:
  1063                           
  1064                           ;./Lcd.h: 30:  RD3 = 1;
  1065     0664  1283               	bcf	3,5	;RP0=0, select bank0
  1066     0665  1303               	bcf	3,6	;RP1=0, select bank0
  1067     0666  1588               	bsf	8,3	;volatile
  1068     0667                     l683:
  1069                           
  1070                           ;./Lcd.h: 31:         _delay((unsigned long)((4)*(20000000/4000.0)));
  1071     0667  301A               	movlw	26
  1072     0668  00F2               	movwf	??_Lcd_Cmd+1
  1073     0669  30F8               	movlw	248
  1074     066A  00F1               	movwf	??_Lcd_Cmd
  1075     066B                     u297:
  1076     066B  0BF1               	decfsz	??_Lcd_Cmd,f
  1077     066C  2E6B               	goto	u297
  1078     066D  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1079     066E  2E6B               	goto	u297
  1080     066F  0000               	nop
  1081     0670                     l685:
  1082                           
  1083                           ;./Lcd.h: 32:         RD3 = 0;
  1084     0670  1283               	bcf	3,5	;RP0=0, select bank0
  1085     0671  1303               	bcf	3,6	;RP1=0, select bank0
  1086     0672  1188               	bcf	8,3	;volatile
  1087     0673                     l34:
  1088     0673  0008               	return
  1089     0674                     __end_of_Lcd_Cmd:
  1090                           
  1091                           	psect	text6
  1092     0674                     __ptext6:	
  1093 ;; *************** function _Lcd_Port *****************
  1094 ;; Defined at:
  1095 ;;		line 4 in file "./Lcd.h"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;  a               1    wreg     unsigned char 
  1098 ;; Auto vars:     Size  Location     Type
  1099 ;;  a               1    0[COMMON] unsigned char 
  1100 ;; Return value:  Size  Location     Type
  1101 ;;                  1    wreg      void 
  1102 ;; Registers used:
  1103 ;;		wreg
  1104 ;; Tracked objects:
  1105 ;;		On entry : 0/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1109 ;;      Params:         0       0       0       0       0
  1110 ;;      Locals:         1       0       0       0       0
  1111 ;;      Temps:          0       0       0       0       0
  1112 ;;      Totals:         1       0       0       0       0
  1113 ;;Total ram usage:        1 bytes
  1114 ;; Hardware stack levels used: 1
  1115 ;; This function calls:
  1116 ;;		Nothing
  1117 ;; This function is called by:
  1118 ;;		_Lcd_Cmd
  1119 ;;		_Lcd_Init
  1120 ;;		_Lcd_Write_Char
  1121 ;; This function uses a non-reentrant model
  1122 ;;
  1123                           
  1124     0674                     _Lcd_Port:	
  1125                           ;psect for function _Lcd_Port
  1126                           
  1127                           
  1128                           ;incstack = 0
  1129                           ; Regs used in _Lcd_Port: [wreg]
  1130                           ;Lcd_Port@a stored from wreg
  1131     0674  00F0               	movwf	Lcd_Port@a
  1132     0675                     l667:
  1133                           
  1134                           ;./Lcd.h: 4: void Lcd_Port(char a);./Lcd.h: 5: {;./Lcd.h: 6:  if(a & 1)
  1135     0675  1C70               	btfss	Lcd_Port@a,0
  1136     0676  2E78               	goto	u11
  1137     0677  2E79               	goto	u10
  1138     0678                     u11:
  1139     0678  2E7D               	goto	l23
  1140     0679                     u10:
  1141     0679                     l669:
  1142                           
  1143                           ;./Lcd.h: 7:   RD4 = 1;
  1144     0679  1283               	bcf	3,5	;RP0=0, select bank0
  1145     067A  1303               	bcf	3,6	;RP1=0, select bank0
  1146     067B  1608               	bsf	8,4	;volatile
  1147     067C  2E80               	goto	l24
  1148     067D                     l23:	
  1149                           ;./Lcd.h: 8:  else
  1150                           
  1151                           
  1152                           ;./Lcd.h: 9:   RD4 = 0;
  1153     067D  1283               	bcf	3,5	;RP0=0, select bank0
  1154     067E  1303               	bcf	3,6	;RP1=0, select bank0
  1155     067F  1208               	bcf	8,4	;volatile
  1156     0680                     l24:
  1157                           
  1158                           ;./Lcd.h: 11:  if(a & 2)
  1159     0680  1CF0               	btfss	Lcd_Port@a,1
  1160     0681  2E83               	goto	u21
  1161     0682  2E84               	goto	u20
  1162     0683                     u21:
  1163     0683  2E86               	goto	l25
  1164     0684                     u20:
  1165     0684                     l671:
  1166                           
  1167                           ;./Lcd.h: 12:   RD5 = 1;
  1168     0684  1688               	bsf	8,5	;volatile
  1169     0685  2E87               	goto	l26
  1170     0686                     l25:	
  1171                           ;./Lcd.h: 13:  else
  1172                           
  1173                           
  1174                           ;./Lcd.h: 14:   RD5 = 0;
  1175     0686  1288               	bcf	8,5	;volatile
  1176     0687                     l26:
  1177                           
  1178                           ;./Lcd.h: 16:  if(a & 4)
  1179     0687  1D70               	btfss	Lcd_Port@a,2
  1180     0688  2E8A               	goto	u31
  1181     0689  2E8B               	goto	u30
  1182     068A                     u31:
  1183     068A  2E8D               	goto	l27
  1184     068B                     u30:
  1185     068B                     l673:
  1186                           
  1187                           ;./Lcd.h: 17:   RD6 = 1;
  1188     068B  1708               	bsf	8,6	;volatile
  1189     068C  2E8E               	goto	l28
  1190     068D                     l27:	
  1191                           ;./Lcd.h: 18:  else
  1192                           
  1193                           
  1194                           ;./Lcd.h: 19:   RD6 = 0;
  1195     068D  1308               	bcf	8,6	;volatile
  1196     068E                     l28:
  1197                           
  1198                           ;./Lcd.h: 21:  if(a & 8)
  1199     068E  1DF0               	btfss	Lcd_Port@a,3
  1200     068F  2E91               	goto	u41
  1201     0690  2E92               	goto	u40
  1202     0691                     u41:
  1203     0691  2E94               	goto	l29
  1204     0692                     u40:
  1205     0692                     l675:
  1206                           
  1207                           ;./Lcd.h: 22:   RD7 = 1;
  1208     0692  1788               	bsf	8,7	;volatile
  1209     0693  2E95               	goto	l31
  1210     0694                     l29:	
  1211                           ;./Lcd.h: 23:  else
  1212                           
  1213                           
  1214                           ;./Lcd.h: 24:   RD7 = 0;
  1215     0694  1388               	bcf	8,7	;volatile
  1216     0695                     l31:
  1217     0695  0008               	return
  1218     0696                     __end_of_Lcd_Port:
  1219     007E                     btemp	set	126	;btemp
  1220     007E                     wtemp0	set	126
  1221                           
  1222                           	psect	config
  1223                           
  1224                           ;Config register CONFIG @ 0x2007
  1225                           ;	Oscillator Selection bits
  1226                           ;	FOSC = HS, HS oscillator
  1227                           ;	Watchdog Timer Enable bit
  1228                           ;	WDTE = OFF, WDT disabled
  1229                           ;	Power-up Timer Enable bit
  1230                           ;	PWRTE = OFF, PWRT disabled
  1231                           ;	Brown-out Reset Enable bit
  1232                           ;	BOREN = ON, BOR enabled
  1233                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1234                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  1235                           ;	Data EEPROM Memory Code Protection bit
  1236                           ;	CPD = OFF, Data EEPROM code protection off
  1237                           ;	Flash Program Memory Write Enable bits
  1238                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1239                           ;	In-Circuit Debugger Mode bit
  1240                           ;	DEBUG = 0x1, unprogrammed default
  1241                           ;	Flash Program Memory Code Protection bit
  1242                           ;	CP = OFF, Code protection off
  1243     2007                     	org	8199
  1244     2007  3FFA               	dw	16378

Data Sizes:
    Strings     40
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 10
		 -> STR_4(CODE[10]), STR_3(CODE[10]), STR_2(CODE[10]), STR_1(CODE[10]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1022
                                             10 COMMON     2     2      0
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     342
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     120
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     497
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     135
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0      75
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sat Jul 27 20:54:16 2024

                       pc 0002                        l31 0695                        l23 067D  
                      l24 0680                        l25 0686                        l26 0687  
                      l34 0673                        l27 068D                        l43 0735  
                      l28 068E                        l29 0694                        l46 0793  
                      l55 06BA                        l49 06EF                        u10 0679  
                      u11 0678                        u20 0684                        u21 0683  
                      u30 068B                        u31 068A                        u40 0692  
                      u41 0691                        u55 06C8                        fsr 0004  
                     l701 06E4                       l703 06E7                       l801 0729  
                     l705 06EC                       l731 0745                       l803 072F  
                     l811 06AD                       l733 0754                       l805 0697  
                     l821 07A4                       l813 0794                       l671 0684  
                     l735 075A                       l727 0736                       l807 069A  
                     l831 07C3                       l823 07A8                       l815 0798  
                     l673 068B                       l681 0664                       l729 073C  
                     l809 06A7                       l841 07E5                       l833 07CA  
                     l825 07B1                       l817 0799                       l675 0692  
                     l667 0675                       l683 0667                       l691 06C5  
                     l843 07EB                       l827 07B5                       l835 07D0  
                     l819 079E                       l669 0679                       l685 0670  
                     l677 065B                       l693 06D3                       l845 07F2  
                     l837 07D9                       l829 07BD                       l679 065E  
                     l791 0706                       l695 06D6                       l687 06BC  
                     l839 07DD                       l793 070C                       l785 06F1  
                     l697 06DB                       l689 06C2                       l787 06F6  
                     l795 0713                       l699 06DE                       l797 0719  
                     l789 0703                       l799 0726                       _RD2 0042  
                     _RD3 0043                       _RD4 0044                       _RD5 0045  
                     _RD6 0046                       _RD7 0047                       u200 07B1  
                     u201 07B0                       u210 07C3                       u211 07C2  
                     u220 07D9                       u221 07D8                       u150 06F6  
                     u230 07EB                       u151 06F5                       u231 07EA  
                     u170 0719                       u171 0718                       u165 06FC  
                     u190 06BA                       u247 06D8                       u191 06B9  
                     u185 071F                       u257 06E9                       u267 0740  
                     u277 074F                       u287 075E                       u297 066B  
                     fsr0 0004                      STR_1 0009                      STR_2 0013  
                    STR_3 001D                      STR_4 0027         ?_Lcd_Write_String 0070  
                    _main 0794                      btemp 007E                      start 0000  
      ??_Lcd_Write_String 0075           __end_of_Lcd_Cmd 0674                     ?_main 0070  
                   _TRISB 0086                     _TRISD 0088                     pclath 000A  
                   status 0003                     wtemp0 007E          __end_of_Lcd_Init 0794  
        __end_of_Lcd_Port 0696           __initialization 07FC              __end_of_main 07FC  
                  ??_main 007A                 ??_Lcd_Cmd 0071           Lcd_Set_Cursor@a 0076  
         Lcd_Set_Cursor@b 0074           Lcd_Set_Cursor@y 0078           Lcd_Set_Cursor@z 0077  
 __end_of__initialization 07FC            __pcstackCOMMON 0070            _Lcd_Set_Cursor 06F0  
               ?_Lcd_Init 0070                 ?_Lcd_Port 0070                __pmaintext 0794  
  __end_of_Lcd_Set_Cursor 0736                ??_Lcd_Init 0074                ??_Lcd_Port 0070  
              __stringtab 0003            _Lcd_Write_Char 06BB                   _Lcd_Cmd 065A  
         ?_Lcd_Set_Cursor 0074                   __ptext1 0696                   __ptext2 06BB  
                 __ptext3 06F0                   __ptext4 0736                   __ptext5 065A  
                 __ptext6 0674    __end_of_Lcd_Write_Char 06F0      end_of_initialization 07FC  
               Lcd_Port@a 0070                 _PORTBbits 0006           ?_Lcd_Write_Char 0070  
       Lcd_Write_String@a 0077         Lcd_Write_String@i 0075          _Lcd_Write_String 0696  
     start_initialization 07FC           Lcd_Write_Char@a 0074           Lcd_Write_Char@y 0073  
               ___latbits 0002                  ?_Lcd_Cmd 0070          ??_Lcd_Set_Cursor 0075  
               __pstrings 0003                  Lcd_Cmd@a 0073               __stringbase 0008  
        ??_Lcd_Write_Char 0071                  _Lcd_Init 0736                  _Lcd_Port 0674  
        main@prevStateRB0 007A          main@prevStateRB1 007B  __end_of_Lcd_Write_String 06BB  
      __end_of__stringtab 0009        Lcd_Write_Char@temp 0072                 stringcode 0003  
      Lcd_Set_Cursor@temp 0079                  stringdir 0003                  stringtab 0003  
